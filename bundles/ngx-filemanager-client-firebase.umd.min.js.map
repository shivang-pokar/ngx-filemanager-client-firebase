{"version":3,"names":["getBaseHref","platformLocation","getBaseHrefFromDOM","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__read","o","m","r","i","ar","error","__spread","arguments","concat","Injectable","AppDialogRenameComponent","dialogRef","data","renamedItem","FormControl","name","path","basename","currentPath","setValue","prototype","onSubmit","renamedFullPath","newPath","close","onCancel","defineProperty","directoryPath","dirname","newItemName","IsDir","join","endsWith","TrimSlashes","inputPath","replace","HasTrailingSlash","EnsurePrefixSlash","hasPrefix","startsWith","HasPrefixSlash","EnsureTrailingSlash","EnsureAbsoluteDirectory","EnsureNoTrailingSlash","slice","Add2ToPath","dotSegments","split","extension","Add2ToPathDir","Component","args","template","MatDialogRef","Inject","MAT_DIALOG_DATA","AppDialogCopyComponent","logger","destroyed","Subject","BehaviorSubject","init","catch","console","info","items","files","isCopy","OkLabel","OkIcon","_a","actionHandler","CloneProvider","actionHandlers","_b","mainActions","icon","onClick","_this","rootPath","GetRootPath","OnNavigateTo","onSelectedDirectory","$disabled","combineLatest","$CurrentPathIsRoot","$copyPathChanged","pipe","map","DisableCopy","OnNavigateToParent","GetCurrentPath","selectedDirectory","OnNewFolderInCurrentDirectory","$FilesWithIcons","takeUntil","subscribe","fileItems","folders","filter","type","firstFile","setSrcDirectory","fullPath","setCopyToPath","ngOnDestroy","copyToPath","srcDirectory","SelectedFolder","SameAsSrcFolder","dirPath","copyToPathRelative","ConvertToRelativePath","onEnterDirectory","LoggerService","AppDialogPermissionsSetObjectComponent","othersControl","allReadersControl","allWritersControl","config","users$","users","groups$","groups","$allEntities","tap","allEntities","arr","tempEntities","uid","isDisabled","id","initPermissions","allPermissions","permissions","othersVal","others","reduce","acc","curr","uniqueWriters","getUniqueTags","writers","uniqueReaders","readers","inputEntities","allInputEntities","allEntitiesUnique","from","Set","strings2Tags","inputArr","val","uuidv4","tags2Strings","newPermissionsObj","response","permissionsObj","NotificationService","matSnackbar","notify","msg","title","open","duration","horizontalPosition","verticalPosition","notifyCancelled","MatSnackBar","AppDialogUploadFilesComponent","notifications","filesControl","currentDirectory","directory","bucketname","bucketName","firebaseConfig","uploaded","AppDialogNewFolderComponent","folderName","ConsoleLoggerService","log","bind","warn","ClientCache","GetCached","input","cachedFolders","SetCached","newFolderFiles","oldFolders","to","cachedCount","cacheLimit","removeRandomFolderPath","keys","randomIndex","Math","floor","random","randomKey","ClientFileSystemDataStore","SetCache","cache","_$currentFiles","_$currentPath","_$selectedFile","CurrentPath","CurrentFiles","SetDirectoryFiles","SetPath","pathParsed","cachedFiles","SelectFile","item","exists","cwd","find","CloneStore","newStore","getValue","fileIcons","defaultIcon","icons","fileExtensions","fileNames","getFileIconName","includes","filename","toLowerCase","ext","getFileExtension","matchesExt","x","matchesFilename","getFolderIconName","guesser","IconUrlResolverService","baseHref","iconAssetDirectory","getFileIconUrl","getFolderIconUrl","APP_BASE_HREF","ClientFileSystemService","iconResolver","instanceCountIncr","store","$currentFiles","$currentPath","$selectedFile","instanceCount","instances","instanceCountDecr","SetStore","OnList","folderPath","OnCreateFolder","disableNoClobber","path.dirname","newDirPathNoClobber","getNextFreeFoldernameRecursively","path.basename","newFolder","rightsFirebase","size","date","Date","toISOString","unshift","OnUploadedFiles","uploadedFiles","isArray","recursivelyTryAddFile","newFilePath","filePath","filePathWith2","newFile","newFiles","OnCopy","singleFileName","OnMove","removeSingleFromList","OnRename","newItemPath","OnEdit","content","OnGetcontent","OnSetPermissions","role","entity","recursive","OnMoveMultiple","removeMultiple","OnCopyMultiple","OnSetPermissionsMultiple","OnSetPermissionsObjectMultiple","take","toPromise","currentFile","OnRemove","UpdateList","res","inputDir","nextPath","currentFiles","itemName","GetFileNameFromPath","cachedFilesWithout","safePath","filePaths","firstPath","removeSet","has","file","addIconPath","assign","onSelectItem","newClone","FilemanagerStatusService","_ActiveRequestsMap","UpdateStatus","key","status","currentValue","providedIn","OptimisticFilesystemService","clientFilesystem","initialize","serverFilesystem","refreshEmitter","auditTime","updateListFromServer","reportError","message","List","apiResult","$CurrentPath","all","selectFirstInCurrentDirectory","error_1","HandleList","HandleCreateFolder","CreateFolder","error_2","HandleUpload","uploadAllPromise","Upload","blankPermissionsObj","SetPermissionsObjectMultiple","HandleCopy","Copy","error_3","HandleMove","Move","error_4","HandleRename","Rename","error_5","HandleEdit","Edit","error_6","HandleGetcontent","Getcontent","error_7","HandleSetPermissions","SetPermissions","error_8","HandleMoveMultiple","MoveMultiple","error_9","HandleCopyMultiple","CopyMultiple","error_10","HandleSetPermissionsMultiple","SetPermissionsMultiple","error_11","HandleSetPermissionsObjectMultiple","error_12","HandleRemove","Remove","error_13","HandleNavigateUp","uuid","parentPath","error_14","Error","GetItemByName","onSelectItemByName","match","firstSelected","shift","AppDialogConfirmationComponent","MakeItem2","itemPath","MakeFile","MakeDir","stubFiles","ActionHandlersService","optimisticFs","dialog","rootLength","virtualRoot","$SelectedFile","fileSystem","initialPath","openDialog","renamedPath","RefreshExplorer","setTimeout","newFolderPath","checkCanAddPermissions","OnDeleteMultiple","deletedPaths","OnSelectItemByPath","OnUploadFilesToCurrentDirectory","filesToAdd","newDirName","OnNewFolder","newDirectoryPath","folder","OnNewFolderClobber","OnDownloadFile","GetSingle","initiateDownload","url","link","document","createElement","download","target","href","click","comp","width","hasBackdrop","disableClose","afterClosed","cloned","ListCurrentPathItems","sortObjectArrayCase","fieldName","direction","a","val_a","val_b","MatDialog","LibMainFileManagerComponent","requestMap","ActiveRequestsMap","searchForm","FormGroup","searchKeyword","Validators","minLength","requests","k","$status","s","ngOnInit","selectedFile","SelectedFile","makeConfig","initLoaded","enableSearch","fileActions","color","folderActions","bulkActions","ClearBulkSelected","of","isAdmin","fileDetailActions","toolTip","allFiles$","folders$","sort","files$","onEnterFolder","onSelectedFilePath","onDetailsClickDelete","onDetailsClickDownload","onDetailsClickRename","onDetailsClickSinglePermissions","onClickCrumb","$triggerClearSelected","$BulkSelected","searchAllDocumentsAndFolders","keyword","toLocaleLowerCase","trim","valid","initCleanSearchResults","startPath","isSearching","showSearchingSpinner","iterateCurrentDocumentAndFolders","level","seachResultDocuments","seachResultFolders","forEach","checkSearchKeywordRelative","targetName","foldersShow","documentsShow","onSelectedSearchItem","fileParentPath","substring","lastIndexOf","MakeRootCrumb","virtualPath","MakeWarningCrumb","selector","providers","Input","MakeCrumbs","absolutePath","virtualRootParsed","absolutePathParsed","indexOf","relativeVirtualRoot","crumbs","crumb","crumbFactory","AppBreadCrumbsComponent","EventEmitter","_currentPath","makeCrumbs","newConfig","_config","clickedCrumb","emit","Output","AppBulkActionsComponent","executeAction","action","selected","clearSelected","promiseDelay","ms","FileDetailsComponent","_file","isFile","isImage","setImageUrl","setPermissions","getFileType","fileName","imageUrl","hasInput","CreateDownloadLink","getFolderSize","metaData","folderSizePath","prop","FormBase","_destroyed","disabled","originalOnDestroy","destroy","originalOnInit","autoCompleteObscureName","internalControl","valueChanges","_value","onChange","onTouched","placeholder","nameParsed","charAt","toUpperCase","substr","ConvertToTitleCase","formControlName","writeValue","registerOnChange","fn","propagateOnChange","registerOnTouched","setDisabledState","disable","enable","validate","c","errors","setValidators","validator","validationError","inputValue","CheckValueIsValid","Directive","FormFileFirebaseComponent","ns","_super","__","constructor","create","__extends","app","firebase.default","apps","initializeApp","storage","currentBucketName","timer","checkAllUploadsAreDone","isStillUploading","props","completed","previous","currentComplete","uploadStatusChanged","maxFiles","clickRemoveTag","fileObject","ensureValueIsArray","bucket_path","refFromURL","delete","onFileChange","event","filesList","beginUploadTask","bucketPath","uniqueFileName","originalFileName","dir","fileData","parseAndCompress","fileParsed","addFile","uploadTask","put","on","TaskEvent","STATE_CHANGED","snap","onNext","onError","complete","onComplete","cancel","imageCompressionMaxSize","imageCompressionQuality","maxWidth","maxQuality","blobToDataURL","downscaleImage","dataURL","newDataURL","oldKb","getFileSizeKiloBytes","newKb","fileNew","dataURI","byteString","atob","mimeString","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","dataURItoBlob","round","head","toFixed","snapshot","state","TaskState","RUNNING","progress","bytesTransferred","totalBytes","getDownloadURL","imageurl","fileIcon","fileicon","thumb","blob","reader","FileReader","onload","onerror","readAsDataURL","dataUrl","newWidth","imageQuality","imageType","debug","image","Image","src","oldWidth","oldHeight","height","newHeight","canvas","ctx","getContext","drawImage","newDataUrl","toDataURL","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","FormFileUploadedFileListComponent","getProgress","isDone","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","MatProgressBarModule","MatInputModule","MatIconModule","exports","declarations","FileSystemRequestBuilder","http","LOG_ID","headers","AddBody","PatchBody","partBody","PatchHeaders","options","MakeJson","makeRequestKey","JSON","stringify","POST","Authorization","window","localStorage","getItem","post","apiErrorResponse","apiErrorResponse_1","errorDetail","detail","statusText","ServerFilesystemProviderService","toString","makeAPIRequest","context","apiEndpoint","Initialize","GetUploadApiUrl","HttpClient","AppDialogPermissionsSetComponent","roleControl","entityTypeControl","entityControl","$users","$groups","choosenValue","AppDialogMyDetailsComponent","AppFileTableMiniFolderBrowserComponent","SelectionModel","selectedItem","changed","selectedDir","enterDirectory","FileSizePipe","transform","bytesInput","precision","bytes","isFinite","unit","units","Pipe","CardFileComponent","checkedItems","isSelected","onSelect","select","onCheck","onUnCheck","deselect","CardFolderComponent","onDoubleClick","enterFolder","AppFileTableComponent","clear","checkedFiles","checkedChanged","selectedFilePath","selectedChanged","currentSelection","every","onCheckAllFolders","onUnCheckAllFolders","onCheckAllFiles","onUnCheckAllFiles","FileSizeModule","MatMenuModule","MatButtonModule","MatTooltipModule","AppFileTableModule","MatToolbarModule","AppActionsMiniBrowserComponent","visible","selectable","addOnBlur","ENTER","COMMA","removableTags","allowCustom","Observable","AppControlTagMultipleComponent","checkExists","hasRed","isDirty","control","dirty","notValid","invalid","selectChoices$","selectInitial","uuidv1","controlAutocomplete","selectChoicesArr","filteredTags","startWith","keyboardInput","tag","markAsUntouched","add","matAutocomplete","isOpen","newTag","updateFormValue","removeTag","index","findIndex","splice","selectedTag","newVal","option","canPush","tagInput","nativeElement","blur","reset","markAsDirty","getLowerCase","ViewChild","static","MatChipsModule","MatAutocompleteModule","MatFormFieldModule","entryComponents","BaseDialogComponent","AppBtnsCancelOkComponent","FormFileFirebaseModule","MatDialogModule","MatSelectModule","MatCardModule","FileTableMiniModule","TagsControlModule","AppMainActionsComponent","HttpClientModule","NgxFilemanagerClientDialogsModule","MatButtonToggleModule","MatCheckboxModule","MatPaginatorModule","MatProgressSpinnerModule","MatSidenavModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatExpansionModule","useFactory","deps","PlatformLocation","useClass","FileSystemStub","setFakeDelay","newDelay","fakeDelayMs","fakeDelay","selectMatches","isMatch","itemsSet","isInDirectory","relative","ensurePrefixSlash","ensureTrailingSlash","matches","baseName","copy","downloadUrl","success","recursivelyTryToCreateFolder","newPathWith2","recursivelySetPermissions","recursivelyTryToAddFile","parsedFilePath","setSinglePermission","isFolder","list","recursivelySetPermissionsObjects","itemsNotDeleted"],"sources":["../../../projects/ngx-filemanager-client-firebase/src/lib/getBaseHref.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-filemanager-client-firebase/src/lib/services/logging/logger.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-rename.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/utils/path-helpers.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-copy-or-move.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-permissions-setobject.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/pure/notification.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-upload.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-new-folder.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/logging/console-logger.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/state/client-filesystem.cache.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/state/client-filesystem.datastore.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/utils/file-icon-guesser.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/pure/icon-url-resolver.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/pure/client-filesystem.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/utils/file.factory.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/state/status.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/pure/optimistic-filesystem.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-confirmation.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/stub/stub-files.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/main-file-manager/action-handlers.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/utils/sort-helpers.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/main-file-manager/main-file-manager.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/bread-crumbs/crumb-factory.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/bread-crumbs/bread-crumbs.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/actions-toolbars/bulk-actions.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/actions-toolbars/main-actions.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/utils/delayer.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-upload/form-file-firebase/file-icon.helper.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-details/file-details.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-upload/form-file-firebase/form-base-class.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/utils/case-helper.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-upload/form-file-firebase/form-file-firebase.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-upload/form-file-firebase/form-file-uploader-list.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-upload/file-upload.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/pure/server-filesystem-request.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/pure/server-filesystem.service.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/base-dialog.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-permissions-set.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialog-my-details.components.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/btns-cancel-ok.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table-mini/file-table-mini-folder-browser.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table-mini/actions-mini-browser.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-size/file-size.pipe.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-size/file-size.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table/card-file.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table/card-folder.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table/file-table.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table/file-table.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/file-table-mini/file-table-mini.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/tags-control/tags-control.component.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/tags-control/tags-control.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ui/dialogs/dialogs.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/ngx-filemanager-client-firebase.module.ts","../../../projects/ngx-filemanager-client-firebase/src/lib/services/stub/stub-filesystem.class.ts"],"sourcesContent":["import { PlatformLocation } from '@angular/common';\n\nexport function getBaseHref(platformLocation: PlatformLocation): string {\n  return platformLocation.getBaseHrefFromDOM();\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\n\nexport abstract class Logger {\n  info: any;\n  warn: any;\n  error: any;\n}\n\nexport type logFn = (message?: any, ...optionalParams: any[]) => void;\n\n@Injectable()\nexport class LoggerService implements Logger {\n  info: logFn;\n  warn: logFn;\n  error: logFn;\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\nimport path from 'path-browserify';\n\nexport interface RenameDialogInterface {\n  currentPath: string;\n}\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>Rename Item</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <h5 class=\"p5 m0\">Old Path: {{ data.currentPath }}</h5>\n        <h5 class=\"p5 m0\">New Path: {{ newPath }}</h5>\n\n        <mat-form-field>\n          <input\n            matInput\n            placeholder=\"New Name\"\n            [formControl]=\"renamedItem\"\n            (keyup.enter)=\"onSubmit()\"\n          />\n        </mat-form-field>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Rename Item\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppDialogRenameComponent {\n  renamedItem = new FormControl();\n\n  constructor(\n    public dialogRef: MatDialogRef<AppDialogRenameComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: RenameDialogInterface\n  ) {\n    const name = path.basename(data.currentPath);\n    this.renamedItem.setValue(name);\n  }\n\n  onSubmit() {\n    const renamedFullPath = this.newPath;\n    this.dialogRef.close(renamedFullPath);\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n\n  get newPath() {\n    const directoryPath = path.dirname(this.data.currentPath);\n    const newItemName = this.renamedItem.value;\n    if (this.IsDir) {\n      return path.join(directoryPath, newItemName, '/');\n    }\n    return path.join(directoryPath, newItemName);\n  }\n  get IsDir() {\n    return this.data.currentPath.endsWith('/');\n  }\n}\n","export function HasPrefixSlash(inputPath: string): boolean {\n  if (!inputPath || !inputPath.length) {\n    return false;\n  }\n  const hasPrefix = inputPath.startsWith('/');\n  return hasPrefix;\n}\n\nexport function TrimSlashes(inputPath: string): string {\n  return inputPath.replace(/^\\/+|\\/+$/g, '');\n}\n\nexport function HasTrailingSlash(inputPath: string): boolean {\n  if (!inputPath || !inputPath.length) {\n    return false;\n  }\n  const hasPrefix = inputPath.endsWith('/');\n  return hasPrefix;\n}\n\nexport function EnsurePrefixSlash(inputPath: string): string {\n  const hasPrefix = HasPrefixSlash(inputPath);\n  const pathParsed = hasPrefix ? inputPath : '/' + inputPath;\n  return pathParsed;\n}\n\nexport function EnsureTrailingSlash(inputPath: string): string {\n  const hasTrailing = HasTrailingSlash(inputPath);\n  const pathParsed = hasTrailing ? inputPath : inputPath + '/';\n  return pathParsed;\n}\n\nexport function EnsureAbsoluteDirectory(inputPath: string): string {\n  const pathParsed = EnsureTrailingSlash(EnsurePrefixSlash(inputPath));\n  return pathParsed;\n}\n\nexport function EnsureNoTrailingSlash(inputPath: string): string {\n  const hasTrailing = HasTrailingSlash(inputPath);\n  const pathParsed = hasTrailing ? inputPath.slice(0, -1) : inputPath;\n  return pathParsed;\n}\n\nexport function Add2ToPath(inputPath: string): string {\n  const dotSegments = inputPath.split('.');\n  const extension = dotSegments.pop();\n  const fileName = dotSegments.join('.') + ' (2)' + '.' + extension;\n  return fileName;\n}\n\nexport function Add2ToPathDir(inputPath: string): string {\n  const pathWithoutSlash = EnsureNoTrailingSlash(inputPath);\n  const pathWith2 = pathWithoutSlash + ' (2)';\n  const newDirName =  EnsureTrailingSlash(pathWith2);\n  return newDirName;\n}\n","import { Component, Inject, OnDestroy } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CoreTypes } from '../../../core-types';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport path from 'path-browserify';\nimport { Subject, BehaviorSubject, combineLatest } from 'rxjs';\nimport { EnsureTrailingSlash } from '../../utils/path-helpers';\nimport { ActionHandlersService } from '../main-file-manager/action-handlers.service';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { MainActionDefinition } from '../actions-toolbars/MainActionDefinition';\n\nexport interface CopyDialogInterface {\n  files: CoreTypes.ResFile[];\n  isCopy: boolean;\n  actionHandler: ActionHandlersService;\n}\n\n@Component({\n  template: `\n    <base-dialog\n      *ngIf=\"srcDirectory\"\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>{{ OkLabel }} Items</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <h5 class=\"my-5\">Selected Items</h5>\n        <mat-chip-list class=\"mb-5\">\n          <mat-chip *ngFor=\"let file of items\">\n            <mat-icon *ngIf=\"file.type === 'file'\">description</mat-icon>\n            <mat-icon *ngIf=\"file.type !== 'file'\">folder</mat-icon>\n            {{ file.name }}\n          </mat-chip>\n        </mat-chip-list>\n        <h5 class=\"my-5\">Navigate to destination folder</h5>\n        <div class=\"full-width\">\n          <mat-card class=\"m-10 bg-grey\">\n            <app-file-table-mini-folder-browser\n              [folders]=\"folders\"\n              [mainActions]=\"mainActions\"\n              (enterDirectory)=\"onEnterDirectory($event)\"\n              (selectedDirectory)=\"onSelectedDirectory($event)\"\n            >\n            </app-file-table-mini-folder-browser>\n          </mat-card>\n        </div>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <h5 class=\"p5 m0\" *ngIf=\"!SelectedFolder\">No folder selected</h5>\n        <h5 class=\"p5 m0\" *ngIf=\"SameAsSrcFolder\">\n          Cannot copy to the same folder\n        </h5>\n        <h5 class=\"p5 m0\" *ngIf=\"!DisableCopy\">\n          Will copy Selected Items to:\n          <strong *ngIf=\"!copyToPathRelative\">/</strong>\n          <strong>{{ copyToPathRelative }}</strong>\n        </h5>\n        <btns-cancel-ok\n          [okIcon]=\"OkIcon\"\n          [okLabel]=\"OkLabel\"\n          [okDisabled]=\"DisableCopy\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styles: [\n    `\n      .bg-grey {\n        background-color: #eee;\n      }\n    `\n  ],\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppDialogCopyComponent implements OnDestroy {\n  copyToPathRelative: string;\n  copyToPath: string;\n  srcDirectory: string;\n  items: CoreTypes.ResFile[];\n  actionHandlers: ActionHandlersService;\n\n  mainActions: MainActionDefinition[];\n  folders: CoreTypes.ResFile[];\n\n  OkLabel: string;\n  OkIcon: string;\n\n  destroyed = new Subject();\n  $copyPathChanged = new BehaviorSubject<string>(null);\n\n  constructor(\n    private logger: LoggerService,\n    public dialogRef: MatDialogRef<AppDialogCopyComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: CopyDialogInterface\n  ) {\n    this.init().catch(e => console.error(e));\n  }\n\n  async init() {\n    this.logger.info('initializing dialog:', { data: this.data });\n    this.items = this.data.files;\n    if (this.data.isCopy) {\n      this.OkLabel = 'Copy';\n      this.OkIcon = 'content_copy';\n    } else {\n      this.OkLabel = 'Move';\n      this.OkIcon = 'forward';\n    }\n    this.actionHandlers = await this.data.actionHandler.CloneProvider();\n    this.mainActions = [\n      {\n        label: 'Home',\n        icon: 'home',\n        onClick: async () => {\n          this.logger.info('Back clicked');\n          const rootPath = this.actionHandlers.GetRootPath();\n          await this.actionHandlers.OnNavigateTo(rootPath);\n          this.onSelectedDirectory(rootPath);\n          return this.onSelectedDirectory(rootPath);\n        },\n        $disabled: combineLatest([\n          this.actionHandlers.$CurrentPathIsRoot,\n          this.$copyPathChanged\n        ]).pipe(\n          map(([isRoot, copyTo]) => {\n            return this.DisableCopy;\n          })\n        )\n      },\n      {\n        label: 'Back',\n        icon: 'reply',\n        onClick: async () => {\n          this.logger.info('Back clicked');\n          await this.actionHandlers.OnNavigateToParent();\n          const selectedDirectory = await this.actionHandlers.GetCurrentPath();\n          return this.onSelectedDirectory(selectedDirectory);\n        },\n        $disabled: this.actionHandlers.$CurrentPathIsRoot\n      },\n      {\n        label: 'New Folder',\n        icon: 'create_new_folder',\n        onClick: async () => this.actionHandlers.OnNewFolderInCurrentDirectory()\n      }\n    ];\n    this.actionHandlers.$FilesWithIcons\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(fileItems => {\n        this.folders = fileItems.filter(f => f.type === 'dir');\n      });\n\n    const firstFile = [...this.items].pop();\n    this.setSrcDirectory(firstFile.fullPath);\n    this.setCopyToPath(this.actionHandlers.GetRootPath());\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  get SelectedFolder() {\n    return !!this.copyToPath;\n  }\n  get SameAsSrcFolder() {\n    return this.copyToPath === this.srcDirectory;\n  }\n  get DisableCopy() {\n    return !this.SelectedFolder || this.SameAsSrcFolder;\n  }\n\n  private setCopyToPath(inputPath: string) {\n    const dirPath = EnsureTrailingSlash(inputPath);\n    this.copyToPath = dirPath;\n    this.$copyPathChanged.next(dirPath);\n    this.copyToPathRelative = this.actionHandlers.ConvertToRelativePath(\n      dirPath\n    );\n    this.logger.info('setCopyToPath:', {\n      inputPath,\n      copyToPath: this.copyToPath,\n      copyToPathRelative: this.copyToPathRelative\n    });\n  }\n\n  private setSrcDirectory(inputPath: string) {\n    const dirPath = EnsureTrailingSlash(path.dirname(inputPath));\n    this.srcDirectory = dirPath;\n    this.logger.info('setSrcDirectory:', {\n      inputPath,\n      srcDirectory: this.srcDirectory\n    });\n  }\n\n  onEnterDirectory(directoryPath: string) {\n    this.logger.info('onEnterDirectory:', { directoryPath });\n    this.setCopyToPath(directoryPath);\n    return this.actionHandlers.OnNavigateTo(directoryPath);\n  }\n\n  onSelectedDirectory(directoryPath: string) {\n    this.logger.info('onSelectedDirectory:', { directoryPath });\n    this.setCopyToPath(directoryPath);\n  }\n\n  onSubmit() {\n    this.dialogRef.close(this.copyToPath);\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Component, Inject, OnDestroy } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\nimport { Observable, Subject, combineLatest } from 'rxjs';\nimport {\n  FileManagerConfig,\n  NameUid,\n} from '../../configuration/client-configuration';\nimport { CoreTypes } from '../../../core-types';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport { map, tap } from 'rxjs/operators';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { Tag } from '../tags-control/tags-control.component';\n\nexport interface PermissionsObjectDialogInterface {\n  files: CoreTypes.ResFile[];\n  config: FileManagerConfig;\n}\nexport interface PermissionsObjectDialogResponseInterface {\n  permissionsObj: CoreTypes.FilePermissionsObject;\n  files: CoreTypes.ResFile[];\n}\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>Set Permissions</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <h5 class=\"my-5\">Selected Items</h5>\n        <mat-chip-list class=\"mb-5\">\n          <mat-chip *ngFor=\"let file of items\">\n            <mat-icon *ngIf=\"file.type === 'file'\">description</mat-icon>\n            <mat-icon *ngIf=\"file.type !== 'file'\">folder</mat-icon>\n            {{ file.name }}\n          </mat-chip>\n        </mat-chip-list>\n\n        <div class=\"full-width\">\n          <h5 class=\"my-5\">Who can see this</h5>\n          <app-control-tag-multiple\n            class=\"full-width -mt-15\"\n            [control]=\"allReadersControl\"\n            [selectChoices$]=\"$allEntities\"\n            [allowCustom]=\"false\"\n          >\n          </app-control-tag-multiple>\n        </div>\n\n        <div *ngIf=\"config?.showWriters\">\n          <h5 class=\"my-5\">Who can edit this</h5>\n          <app-control-tag-multiple\n            class=\"full-width -mt-15\"\n            [control]=\"allWritersControl\"\n            [selectChoices$]=\"$allEntities\"\n            [allowCustom]=\"false\"\n          >\n          </app-control-tag-multiple>\n        </div>\n\n        <div *ngIf=\"config?.showOthers\">\n          <h5 class=\"my-5\">Everyone else can</h5>\n          <mat-form-field class=\"full-width\">\n            <mat-select matInput [formControl]=\"othersControl\">\n              <mat-option\n                *ngFor=\"let permission of othersOptions\"\n                [value]=\"permission\"\n              >\n                {{ permission }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </ng-template>\n\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Set Permissions\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styleUrls: ['../shared-utility-styles.scss'],\n  styles: [\n    `\n      .my-5 {\n        margin: 5px 0;\n      }\n      .mb-5 {\n        margin-bottom: 5px;\n      }\n      .-mt-15 {\n        margin-top: -15px;\n      }\n    `,\n  ],\n})\nexport class AppDialogPermissionsSetObjectComponent implements OnDestroy {\n  items: CoreTypes.ResFile[];\n\n  othersControl = new FormControl();\n  othersOptions: CoreTypes.FilePermissionOthers[] = [\n    'read/write',\n    'read',\n    'hidden',\n  ];\n\n  allReadersControl = new FormControl([]);\n  allWritersControl = new FormControl([]);\n\n  $allEntities: Observable<Tag[]>;\n\n  destroyed = new Subject();\n  config: FileManagerConfig;\n\n  constructor(\n    private logger: LoggerService,\n    public dialogRef: MatDialogRef<AppDialogPermissionsSetObjectComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: PermissionsObjectDialogInterface\n  ) {\n    this.logger.info('Initializing setobject dialog', { data });\n    this.items = data.files;\n    this.config = data.config;\n    const users$ = this.config.users;\n    const groups$ = this.config.groups;\n    this.$allEntities = combineLatest([groups$, users$]).pipe(\n      tap((allEntities) => this.logger.info('allEntities', { allEntities })),\n      map((arr) => {\n        let tempEntities: NameUid[] = [\n          {\n            uid: '',\n            name: 'Groups: ',\n            isDisabled: true,\n          },\n        ];\n        tempEntities = tempEntities.concat(arr[0]);\n        tempEntities.push({\n          uid: '',\n          name: 'Users: ',\n          isDisabled: true,\n        });\n        return tempEntities.concat(arr[1]);\n      }),\n      map((arr) =>\n        arr.map(\n          (n) =>\n            ({\n              id: n.uid,\n              name: n.name,\n              isDisabled: !!n.isDisabled,\n            } as Tag)\n        )\n      )\n    );\n    this.$allEntities.subscribe((allEntities) =>\n      this.logger.info('allEntities', { allEntities })\n    );\n    this.initPermissions(data.files);\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  initPermissions(files: CoreTypes.ResFile[]) {\n    const allPermissions = files.map((f) => f.permissions);\n    const othersVal = allPermissions\n      .map((p) => p.others)\n      .reduce((acc, curr) => {\n        if (acc === '-') {\n          return curr;\n        }\n        const stillSame = acc === curr;\n        if (stillSame) {\n          return acc;\n        }\n        return null;\n      }, '-');\n    if (othersVal) {\n      this.othersControl.setValue(othersVal);\n    }\n\n    const uniqueWriters = this.getUniqueTags(\n      allPermissions.map((p) => p.writers)\n    );\n    this.allWritersControl.setValue(uniqueWriters);\n\n    const uniqueReaders = this.getUniqueTags(\n      allPermissions.map((p) => p.readers)\n    );\n    this.allReadersControl.setValue(uniqueReaders);\n\n    this.logger.info('set permissions', {\n      othersVal,\n      uniqueWriters,\n      uniqueReaders,\n    });\n  }\n\n  getUniqueTags(inputEntities: string[][]): Tag[] {\n    const allInputEntities = inputEntities.reduce((acc, curr) => {\n      return acc.concat(curr);\n    }, []);\n    const allEntitiesUnique = Array.from(new Set(allInputEntities));\n    return this.strings2Tags(allEntitiesUnique);\n  }\n\n  strings2Tags(inputArr: string[]): Tag[] {\n    return inputArr.map(\n      (val) =>\n        ({\n          id: uuidv4(),\n          name: val,\n        } as Tag)\n    );\n  }\n  tags2Strings(inputArr: Tag[]): string[] {\n    return inputArr.map((val) => val.name);\n  }\n\n  onSubmit() {\n    const newPermissionsObj: CoreTypes.FilePermissionsObject = {\n      others: this.othersControl.value,\n      readers: this.tags2Strings(this.allReadersControl.value),\n      writers: this.tags2Strings(this.allWritersControl.value),\n    };\n    const response: PermissionsObjectDialogResponseInterface = {\n      permissionsObj: newPermissionsObj,\n      files: this.data.files,\n    };\n    this.logger.info('onSubmit', { newPermissionsObj, response });\n    this.dialogRef.close(response);\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable()\nexport class NotificationService {\n  constructor(private matSnackbar: MatSnackBar) {}\n\n  public notify(msg: string, title?: string) {\n    return this.matSnackbar.open(msg, title, {\n      duration: 4000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  public notifyCancelled() {\n    return this.notify('Cancelled Operation');\n  }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport { FormFilesConfiguration } from '../file-upload/form-file-firebase/form-file-firebase.component';\nimport { NotificationService } from '../../services/pure/notification.service';\nimport { FormArrayFileObject } from '../file-upload/form-file-firebase/FormArrayFileObject';\n\nexport interface UploadDialogInterface {\n  currentDirectory: string;\n  firebaseConfig: {};\n  bucketName: string;\n}\n\nexport interface UploadDialogResponseInterface {\n  uploaded: string[];\n}\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>Upload Files</h2>\n        <h5>To Folder: {{ currentDirectory }}</h5>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <div style=\"width: 100%;\">\n          <form-file-firebase\n            [formControl]=\"filesControl\"\n            [config]=\"config\"\n            (uploadStatusChanged)=\"isUploading.next($event)\"\n          >\n          </form-file-firebase>\n        </div>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Finish\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n          [okDisabled]=\"isUploading | async\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n    <div #hidden></div>\n  `,\n  styles: [\n    `\n      .dz-image {\n        display: none;\n      }\n      .dz-details > img {\n        display: none;\n      }\n    `\n  ],\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppDialogUploadFilesComponent {\n  filesControl = new FormControl([]);\n\n  currentDirectory = '';\n\n  config: FormFilesConfiguration;\n  isUploading = new BehaviorSubject<boolean>(true);\n\n  constructor(\n    private logger: LoggerService,\n    private notifications: NotificationService,\n    public dialogRef: MatDialogRef<AppDialogUploadFilesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: UploadDialogInterface\n  ) {\n    this.config = {\n      directory: data.currentDirectory,\n      bucketname: data.bucketName,\n      firebaseConfig: data.firebaseConfig\n    };\n    this.logger.info('initializing:', {\n      currentDirectory: this.currentDirectory,\n      config: this.config,\n      data: data\n    });\n  }\n\n  onSubmit() {\n    const files = this.filesControl.value as FormArrayFileObject[];\n    const response: UploadDialogResponseInterface = {\n      uploaded: files.map(f => f.value.name)\n    };\n    this.dialogRef.close(response);\n  }\n\n  onCancel() {\n    const response: UploadDialogResponseInterface = {\n      uploaded: []\n    };\n    this.dialogRef.close(response);\n  }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>Create Folder</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <div>\n          <mat-form-field>\n            <input\n              matInput\n              placeholder=\"New Folder Name\"\n              [formControl]=\"folderName\"\n              (keyup.enter)=\"onSubmit()\"\n            />\n          </mat-form-field>\n        </div>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Create Folder\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppDialogNewFolderComponent {\n  folderName = new FormControl('New folder');\n\n  constructor(public dialogRef: MatDialogRef<AppDialogNewFolderComponent>) {}\n\n  onSubmit() {\n    this.dialogRef.close(this.folderName.value);\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Logger } from './logger.service';\n\n@Injectable()\nexport class ConsoleLoggerService implements Logger {\n  get info() {\n    const boundLogFn = console.log.bind(console, 'ngx-fm:: ');\n    return boundLogFn;\n  }\n\n  get warn() {\n    const boundLogFn = console.warn.bind(console, 'ngx-fm:: ');\n    return boundLogFn;\n  }\n\n  get error() {\n    const boundLogFn = console.error.bind(console, 'ngx-fm:: ');\n    return boundLogFn;\n  }\n}\n","import { CoreTypes } from '../../../core-types';\nimport { EnsureTrailingSlash } from '../../utils/path-helpers';\nimport { ConsoleLoggerService } from '../logging/console-logger.service';\n\nexport class ClientCache {\n  private logger = new ConsoleLoggerService();\n\n  private cachedFolders: {\n    [folderPath: string]: CoreTypes.ResFile[];\n  } = {};\n  private cacheLimit = 20;\n\n  public GetCached(input: string) {\n    const directoryPath = EnsureTrailingSlash(input);\n    return this.cachedFolders[directoryPath] || [];\n  }\n  public SetCached(input: string, newFolderFiles: CoreTypes.ResFile[]) {\n    const directoryPath = EnsureTrailingSlash(input);\n    const oldFolders = this.GetCached(directoryPath);\n    this.logger.info('SetCached()', {\n      from: oldFolders.length,\n      to: newFolderFiles.length\n    });\n    if (this.cachedCount > this.cacheLimit) {\n      this.removeRandomFolderPath();\n    }\n    this.cachedFolders[directoryPath] = newFolderFiles;\n  }\n\n  private get cachedCount() {\n    return Object.keys(this.cachedFolders).length;\n  }\n  private removeRandomFolderPath() {\n    const randomIndex = Math.floor(Math.random() * this.cachedCount);\n    const randomKey = Object.keys(this.cachedFolders)[randomIndex];\n    delete this.cachedFolders[randomKey];\n  }\n}\n","import { CoreTypes } from '../../../core-types';\nimport { ClientCache } from './client-filesystem.cache';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { EnsurePrefixSlash } from '../../utils/path-helpers';\nimport { ConsoleLoggerService } from '../logging/console-logger.service';\n\nexport class ClientFileSystemDataStore {\n  private cache = new ClientCache();\n\n  private _$currentFiles = new BehaviorSubject<CoreTypes.ResFile[]>([]);\n  private _$currentPath = new BehaviorSubject<string>(null);\n  private _$selectedFile = new BehaviorSubject<CoreTypes.ResFile>(null);\n\n  private logger = new ConsoleLoggerService();\n\n  public SetCache(cache: ClientCache) {\n    this.cache = cache;\n  }\n\n  public get $currentFiles(): Observable<CoreTypes.ResFile[]> {\n    return this._$currentFiles;\n  }\n  public get $currentPath(): Observable<string> {\n    return this._$currentPath;\n  }\n  public get $selectedFile(): Observable<CoreTypes.ResFile> {\n    return this._$selectedFile;\n  }\n\n  public CurrentPath() {\n    return this._$currentPath.value;\n  }\n  public CurrentFiles() {\n    return this._$currentFiles.value;\n  }\n  public GetCached(directoryPath: string) {\n    return this.cache.GetCached(directoryPath);\n  }\n  public SetDirectoryFiles(files: CoreTypes.ResFile[], directoryPath: string) {\n    this.cache.SetCached(directoryPath, files);\n  }\n  public SetPath(path: string) {\n    const pathParsed = EnsurePrefixSlash(path);\n    this.logger.info('datastore.SetPath', { path, pathParsed });\n    const cachedFiles = this.cache.GetCached(pathParsed);\n    this._$currentPath.next(pathParsed);\n    this._$currentFiles.next(cachedFiles);\n  }\n  SelectFile(item: CoreTypes.ResFile) {\n    this._$selectedFile.next(item);\n  }\n  exists(fullPath: string, cwd: string): boolean {\n    const filesInDir = this.cache.GetCached(cwd);\n    const exists = filesInDir.find(f => f.fullPath === fullPath);\n    return !!exists;\n  }\n\n  CloneStore(): ClientFileSystemDataStore {\n    const newStore = new ClientFileSystemDataStore();\n    newStore.SetPath(this.CurrentPath());\n    newStore.SetDirectoryFiles(\n      this._$currentFiles.getValue(),\n      this.CurrentPath()\n    );\n    newStore.SetCache(this.cache);\n    return newStore;\n  }\n}\n","export interface FileIcon {\n  /**\n   * Name of the icon, e.g. 'javascript'\n   */\n  name: string;\n\n  /**\n   * Define the file extensions that should use this icon.\n   * E.g. ['js']\n   */\n  fileExtensions?: string[];\n\n  /**\n   * Define if there are some static file names that should apply this icon.\n   * E.g. ['sample.js']\n   */\n  fileNames?: string[];\n\n  /**\n   * Define if there is a light icon available.\n   */\n  light?: boolean;\n\n  /**\n   * Define if there is a high contrast icon available.\n   */\n  highContrast?: boolean;\n\n  /**\n   * Define if the icon should be disabled.\n   */\n  disabled?: boolean;\n}\n\nexport interface FolderTheme {\n  /**\n   * Name of the theme\n   */\n  name: string;\n\n  /**\n   * Define the default icon for folders in a theme.\n   */\n  defaultIcon: DefaultIcon;\n\n  /**\n   * Icon for root folders.\n   */\n  rootFolder?: DefaultIcon;\n\n  /**\n   * Defines folder icons for specific folder names.\n   */\n  icons?: FolderIcon[];\n}\n\nexport interface FolderIcon {\n  /**\n   * Name of the icon, e.g. 'src'\n   */\n  name: string;\n\n  /**\n   * Define the folder names that should apply the icon.\n   * E.g. ['src', 'source']\n   */\n  folderNames: string[];\n\n  /**\n   * Define if there is a light icon available.\n   */\n  light?: boolean;\n\n  /**\n   * Define if there is a high contrast icon available.\n   */\n  highContrast?: boolean;\n\n  /**\n   * Define if the icon should be disabled.\n   */\n  disabled?: boolean;\n}\n\nexport interface DefaultIcon {\n  /**\n   * Name of the icon, e.g. 'src'\n   */\n  name: string;\n\n  /**\n   * Define if there is a light icon available.\n   */\n  light?: boolean;\n\n  /**\n   * Define if there is a high contrast icon available.\n   */\n  highContrast?: boolean;\n}\n\nexport class FileIcons {\n  /**\n   * Define the default icon for files.\n   */\n  defaultIcon: DefaultIcon;\n\n  /**\n   * Defines all folder icons.\n   */\n  icons?: FileIcon[];\n}\n\nexport const fileIcons: FileIcons = {\n  defaultIcon: { name: 'file' },\n  icons: [\n    { name: 'word', fileExtensions: ['doc', 'docx', 'rtf'] },\n    { name: 'pdf', fileExtensions: ['pdf'] },\n    { name: 'table', fileExtensions: ['xlsx', 'xls', 'csv', 'tsv'] },\n    {\n      name: 'html',\n      fileExtensions: ['html', 'htm', 'xhtml', 'html_vm', 'asp']\n    },\n    {\n      name: 'markdown',\n      fileExtensions: ['md', 'markdown', 'rst']\n    },\n    { name: 'yaml', fileExtensions: ['yaml', 'YAML-tmLanguage', 'yml'] },\n    {\n      name: 'xml',\n      fileExtensions: [\n        'xml',\n        'plist',\n        'xsd',\n        'dtd',\n        'xsl',\n        'xslt',\n        'resx',\n        'iml',\n        'xquery',\n        'tmLanguage',\n        'manifest',\n        'project'\n      ],\n      fileNames: ['.htaccess']\n    },\n    {\n      name: 'image',\n      fileExtensions: [\n        'png',\n        'jpeg',\n        'jpg',\n        'gif',\n        'svg',\n        'ico',\n        'tif',\n        'tiff',\n        'psd',\n        'psb',\n        'ami',\n        'apx',\n        'bmp',\n        'bpg',\n        'brk',\n        'cur',\n        'dds',\n        'dng',\n        'exr',\n        'fpx',\n        'gbr',\n        'img',\n        'jbig2',\n        'jb2',\n        'jng',\n        'jxr',\n        'pbm',\n        'pgf',\n        'pic',\n        'raw',\n        'webp',\n        'eps'\n      ]\n    },\n    { name: 'tex', fileExtensions: ['tex', 'cls', 'sty'] },\n    {\n      name: 'powerpoint',\n      fileExtensions: [\n        'pptx',\n        'ppt',\n        'pptm',\n        'potx',\n        'potm',\n        'ppsx',\n        'ppsm',\n        'pps',\n        'ppam',\n        'ppa'\n      ]\n    },\n    {\n      name: 'video',\n      fileExtensions: [\n        'webm',\n        'mkv',\n        'flv',\n        'vob',\n        'ogv',\n        'ogg',\n        'gifv',\n        'avi',\n        'mov',\n        'qt',\n        'wmv',\n        'yuv',\n        'rm',\n        'rmvb',\n        'mp4',\n        'm4v',\n        'mpg',\n        'mp2',\n        'mpeg',\n        'mpe',\n        'mpv',\n        'm2v'\n      ]\n    },\n    { name: 'audio', fileExtensions: ['mp3', 'flac', 'm4a', 'wma', 'aiff'] },\n    { name: 'document', fileExtensions: ['txt'] }\n  ]\n};\n\nconst folderIcons: FolderTheme[] = [\n  {\n    name: 'specific',\n    defaultIcon: { name: 'folder-aws' },\n    rootFolder: { name: 'folder-root' },\n    icons: [\n      { name: 'folder-src', folderNames: ['src', 'source', 'sources'] },\n      { name: 'folder-dist', folderNames: ['dist', 'out', 'build', 'release'] },\n      {\n        name: 'folder-css',\n        folderNames: ['css', 'stylesheet', 'stylesheets', 'style', 'styles']\n      },\n      { name: 'folder-sass', folderNames: ['sass', '_sass', 'scss', '_scss'] },\n      {\n        name: 'folder-images',\n        folderNames: [\n          'images',\n          'image',\n          'img',\n          'icons',\n          'icon',\n          'ico',\n          'screenshot',\n          'screenshots'\n        ]\n      },\n      { name: 'folder-scripts', folderNames: ['script', 'scripts'] },\n      { name: 'folder-node', folderNames: ['node_modules'] },\n      {\n        name: 'folder-javascript',\n        folderNames: ['js', 'javascript', 'javascripts']\n      },\n      { name: 'folder-font', folderNames: ['font', 'fonts'] },\n      { name: 'folder-bower', folderNames: ['bower_components'] },\n      {\n        name: 'folder-test',\n        folderNames: [\n          'test',\n          'tests',\n          'testing',\n          '__tests__',\n          '__snapshots__',\n          '__mocks__',\n          '__test__',\n          'spec',\n          'specs'\n        ]\n      },\n      {\n        name: 'folder-jinja',\n        folderNames: ['jinja', 'jinja2', 'j2'],\n        light: true\n      },\n      { name: 'folder-markdown', folderNames: ['markdown', 'md'] },\n      { name: 'folder-php', folderNames: ['php'] },\n      { name: 'folder-phpmailer', folderNames: ['phpmailer'] },\n      { name: 'folder-sublime', folderNames: ['sublime'] },\n      {\n        name: 'folder-docs',\n        folderNames: ['doc', 'docs', 'documents', 'documentation']\n      },\n      {\n        name: 'folder-git',\n        folderNames: ['.git', 'submodules', '.submodules']\n      },\n      { name: 'folder-github', folderNames: ['.github'] },\n      { name: 'folder-gitlab', folderNames: ['.gitlab'] },\n      { name: 'folder-vscode', folderNames: ['.vscode', '.vscode-test'] },\n      {\n        name: 'folder-views',\n        folderNames: [\n          'view',\n          'views',\n          'screen',\n          'screens',\n          'page',\n          'pages',\n          'html'\n        ]\n      },\n      { name: 'folder-vue', folderNames: ['vue'] },\n      { name: 'folder-expo', folderNames: ['.expo'] },\n      {\n        name: 'folder-config',\n        folderNames: [\n          'config',\n          'configs',\n          'configuration',\n          'configurations',\n          'settings',\n          'META-INF'\n        ]\n      },\n      {\n        name: 'folder-i18n',\n        folderNames: [\n          'i18n',\n          'internationalization',\n          'lang',\n          'language',\n          'languages',\n          'locale',\n          'locales',\n          'localization',\n          'translation',\n          'translations'\n        ]\n      },\n      { name: 'folder-components', folderNames: ['components'] },\n      { name: 'folder-aurelia', folderNames: ['aurelia_project'] },\n      {\n        name: 'folder-resource',\n        folderNames: [\n          'resource',\n          'resources',\n          'res',\n          'asset',\n          'assets',\n          'static'\n        ]\n      },\n      {\n        name: 'folder-lib',\n        folderNames: ['lib', 'libs', 'library', 'libraries']\n      },\n      {\n        name: 'folder-theme',\n        folderNames: ['themes', 'theme', 'color', 'colors', 'design', 'designs']\n      },\n      { name: 'folder-webpack', folderNames: ['webpack'] },\n      { name: 'folder-global', folderNames: ['global'] },\n      { name: 'folder-public', folderNames: ['public', 'wwwroot'] },\n      {\n        name: 'folder-include',\n        folderNames: ['include', 'includes', '_includes']\n      },\n      { name: 'folder-docker', folderNames: ['docker', '.docker'] },\n      { name: 'folder-ngrx-effects', folderNames: ['effects'] },\n      { name: 'folder-ngrx-state', folderNames: ['states', 'state'] },\n      { name: 'folder-ngrx-reducer', folderNames: ['reducers', 'reducer'] },\n      { name: 'folder-ngrx-actions', folderNames: ['actions'] },\n      { name: 'folder-ngrx-entities', folderNames: ['entities'] },\n      { name: 'folder-redux-reducer', folderNames: ['reducers', 'reducer'] },\n      { name: 'folder-redux-actions', folderNames: ['actions'] },\n      { name: 'folder-redux-store', folderNames: ['store'] },\n      { name: 'folder-react-components', folderNames: ['components'] },\n      {\n        name: 'folder-database',\n        folderNames: ['db', 'database', 'sql', 'data', '_data']\n      },\n      { name: 'folder-log', folderNames: ['log', 'logs'] },\n      {\n        name: 'folder-temp',\n        folderNames: [\n          'temp',\n          '.temp',\n          'tmp',\n          '.tmp',\n          'cached',\n          'cache',\n          '.cache'\n        ]\n      },\n      { name: 'folder-aws', folderNames: ['aws', '.aws'] },\n      { name: 'folder-audio', folderNames: ['audio', 'audios', 'music'] },\n      {\n        name: 'folder-video',\n        folderNames: ['video', 'videos', 'movie', 'movies']\n      },\n      { name: 'folder-kubernetes', folderNames: ['kubernetes', 'k8s'] },\n      { name: 'folder-import', folderNames: ['import', 'imports', 'imported'] },\n      { name: 'folder-export', folderNames: ['export', 'exports', 'exported'] },\n      { name: 'folder-wakatime', folderNames: ['wakatime'] },\n      { name: 'folder-circleci', folderNames: ['.circleci'] },\n      { name: 'folder-wordpress', folderNames: ['wp-content'] },\n      { name: 'folder-gradle', folderNames: ['gradle', '.gradle'] },\n      { name: 'folder-coverage', folderNames: ['coverage', '.nyc-output'] },\n      {\n        name: 'folder-class',\n        folderNames: ['class', 'classes', 'model', 'models']\n      },\n      {\n        name: 'folder-other',\n        folderNames: ['other', 'others', 'misc', 'miscellaneous']\n      },\n      { name: 'folder-typescript', folderNames: ['typescript', 'ts'] },\n      { name: 'folder-routes', folderNames: ['routes'] },\n      { name: 'folder-ci', folderNames: ['.ci', 'ci'] },\n      {\n        name: 'folder-benchmark',\n        folderNames: [\n          'benchmark',\n          'benchmarks',\n          'performance',\n          'measure',\n          'measures',\n          'measurement'\n        ]\n      },\n      {\n        name: 'folder-messages',\n        folderNames: [\n          'messages',\n          'forum',\n          'chat',\n          'chats',\n          'conversation',\n          'conversations'\n        ]\n      },\n      { name: 'folder-less', folderNames: ['less'] },\n      { name: 'folder-python', folderNames: ['python', '__pycache__'] },\n      { name: 'folder-debug', folderNames: ['debug', 'debugging'] },\n      { name: 'folder-fastlane', folderNames: ['fastlane'] },\n      {\n        name: 'folder-plugin',\n        folderNames: [\n          'plugin',\n          'plugins',\n          '_plugins',\n          'extension',\n          'extensions',\n          'addon',\n          'addons'\n        ]\n      },\n      {\n        name: 'folder-controller',\n        folderNames: ['controller', 'controllers', 'service', 'services']\n      },\n      { name: 'folder-ansible', folderNames: ['ansible'] },\n      { name: 'folder-server', folderNames: ['server', 'servers', 'backend'] },\n      { name: 'folder-client', folderNames: ['client', 'clients', 'frontend'] },\n      { name: 'folder-tasks', folderNames: ['tasks', 'tickets'] },\n      { name: 'folder-android', folderNames: ['android'] },\n      { name: 'folder-ios', folderNames: ['ios'] },\n      { name: 'folder-upload', folderNames: ['uploads', 'upload'] },\n      { name: 'folder-download', folderNames: ['downloads', 'download'] },\n      { name: 'folder-tools', folderNames: ['tools'] },\n      { name: 'folder-helper', folderNames: ['helpers', 'helper'] }\n    ]\n  },\n  {\n    name: 'classic',\n    defaultIcon: { name: 'folder' },\n    rootFolder: { name: 'folder-root' }\n  },\n  { name: 'none', defaultIcon: { name: '' } }\n];\n\nconst getFileIconName = (input: string) => {\n  if (!input || !input.includes('.')) {\n    return fileIcons.defaultIcon.name;\n  }\n  const filename = input.toLowerCase();\n  const ext = getFileExtension(filename);\n\n  const matchesExt = fileIcons.icons.filter(\n    x => !!x.fileExtensions && !!x.fileExtensions.filter(y => y === ext).length\n  );\n  const matchesFilename = fileIcons.icons.filter(\n    x => !!x.fileNames && !!x.fileNames.filter(y => y === filename).length\n  );\n  if (!!matchesFilename.length) {\n    return matchesFilename[0].name;\n  } else if (!!matchesExt.length) {\n    return matchesExt[0].name;\n  }\n\n  return fileIcons.defaultIcon.name;\n};\n\nconst isFileImage = (filename: string) => getFileIconName(filename) === 'image';\n\nconst getFileExtension = (filename: string) => filename.split('.').pop();\n\nconst getFileName = (filename: string) => {\n  const slashSegments = filename.split('/');\n  const filenameWithExt = slashSegments.pop();\n  const dotSegments = filenameWithExt.split('.');\n  if (dotSegments.length < 2) {\n    return filenameWithExt;\n  }\n  dotSegments.pop();\n  return dotSegments.join('.');\n};\n\nconst getFolderIconName = (filename: string) => {\n  return 'folder-other';\n  filename = filename.toLowerCase();\n  const matches = folderIcons[0].icons.filter(\n    x => !!x.folderNames && !!x.folderNames.filter(y => y === filename).length\n  );\n  if (!!matches.length) {\n    return matches[0].name;\n  }\n\n  return folderIcons[0].defaultIcon.name;\n};\n\nexport const guesser = {\n  isFileImage,\n  getFileExtension,\n  getFileName,\n  getFolderIconName,\n  getFileIconName,\n};\n","import { guesser } from '../../utils/file-icon-guesser';\nimport { Injectable, Inject } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport path from 'path-browserify';\n\n@Injectable()\nexport class IconUrlResolverService {\n  iconAssetDirectory = '/assets/fileicons/';\n  constructor(@Inject(APP_BASE_HREF) private baseHref: string) {}\n\n  getFileIconUrl(filename: string) {\n    return path.join(\n      this.baseHref,\n      this.iconAssetDirectory,\n      guesser.getFileIconName(filename) + '.svg'\n    );\n  }\n  getFolderIconUrl(filename: string) {\n    return path.join(\n      this.baseHref,\n      this.iconAssetDirectory,\n      guesser.getFolderIconName(filename) + '.svg'\n    );\n  }\n}\n","import { map, filter, take } from 'rxjs/operators';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as path from 'path-browserify';\nimport { CoreTypes } from '../../../core-types';\nimport {\n  Add2ToPathDir,\n  EnsureTrailingSlash,\n  EnsureNoTrailingSlash,\n  Add2ToPath\n} from '../../utils/path-helpers';\nimport { LoggerService } from '../logging/logger.service';\nimport { ClientFileSystem } from './client-filesystem.interface';\nimport { ClientFileSystemDataStore } from '../state/client-filesystem.datastore';\nimport { IconUrlResolverService } from './icon-url-resolver.service';\nimport { MakeClientDirectory, MakeClientFile } from '../../utils/file.factory';\n\n// tslint:disable:member-ordering\n@Injectable()\nexport class ClientFileSystemService implements ClientFileSystem, OnDestroy {\n  private store = new ClientFileSystemDataStore();\n\n  get $currentFiles() {\n    return this.store.$currentFiles;\n  }\n  get $currentPath() {\n    return this.store.$currentPath;\n  }\n  get $selectedFile() {\n    return this.store.$selectedFile;\n  }\n\n  private static instanceCount = 0;\n  private instanceCountIncr() {\n    ClientFileSystemService.instanceCount++;\n    this.logger.info('new instance created', { instances: this.instances });\n  }\n  private instanceCountDecr() {\n    ClientFileSystemService.instanceCount--;\n    this.logger.info('instance destroyed', { instances: this.instances });\n  }\n  get instances() {\n    return ClientFileSystemService.instanceCount;\n  }\n\n  constructor(\n    private logger: LoggerService,\n    private iconResolver: IconUrlResolverService\n  ) {\n    this.instanceCountIncr();\n  }\n\n  ngOnDestroy() {\n    this.instanceCountDecr();\n  }\n\n  public SetStore(store: ClientFileSystemDataStore) {\n    this.store = store;\n  }\n\n  async OnList(folderPath: string): Promise<void> {\n    this.logger.info('client.OnList', { folderPath });\n    this.store.SetPath(folderPath);\n  }\n  async OnCreateFolder(\n    newPath: string,\n    disableNoClobber?: boolean\n  ): Promise<void> {\n    const cwd = path.dirname(newPath);\n    const cachedFiles = this.store.GetCached(cwd);\n    const newDirPathNoClobber = this.getNextFreeFoldernameRecursively(\n      newPath,\n      cwd\n    );\n    const folderName = path.basename(newDirPathNoClobber);\n    const newFolder = MakeClientDirectory(folderName, newDirPathNoClobber);\n    cachedFiles.unshift(newFolder);\n    this.store.SetDirectoryFiles(cachedFiles, cwd);\n    this.store.SetPath(cwd);\n  }\n  async OnUploadedFiles(uploadedFiles: string[]) {\n    if (!Array.isArray(uploadedFiles) || !uploadedFiles.length) {\n      return;\n    }\n    const cwd = this.store.CurrentPath();\n    uploadedFiles.map(f => this.recursivelyTryAddFile(cwd, f));\n  }\n  private recursivelyTryAddFile(cwd: string, newFilePath: string) {\n    const filePath = EnsureNoTrailingSlash(newFilePath);\n    const exists = this.store.exists(filePath, cwd);\n    if (!exists) {\n      const newFile = MakeClientFile(newFilePath);\n      const oldFiles = this.store.GetCached(cwd);\n      const newFiles = [...oldFiles, newFile];\n      this.store.SetDirectoryFiles(newFiles, cwd);\n      return;\n    }\n    const filePathWith2 = Add2ToPath(filePath);\n    return this.recursivelyTryAddFile(cwd, filePathWith2);\n  }\n  async OnCopy(singleFileName: string, newPath: string): Promise<void> {}\n  async OnMove(item: string, newPath: string): Promise<void> {\n    return this.removeSingleFromList(item);\n  }\n  async OnRename(item: string, newItemPath: string): Promise<void> {}\n  async OnEdit(item: string, content: string): Promise<void> {}\n  async OnGetcontent(item: string): Promise<void> {}\n  async OnSetPermissions(\n    item: string,\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<void> {}\n  async OnMoveMultiple(items: string[], newPath: string): Promise<void> {\n    return this.removeMultiple(items);\n  }\n  async OnCopyMultiple(items: string[], newPath: string): Promise<void> {}\n  async OnSetPermissionsMultiple(\n    items: string[],\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<void> {}\n  async OnSetPermissionsObjectMultiple(\n    items: string[],\n    permissionsObj: CoreTypes.FilePermissionsObject,\n    recursive?: boolean\n  ): Promise<void> {\n    const currentFile = await this.$selectedFile.pipe(take(1)).toPromise();\n    if (items.includes(currentFile.fullPath)) {\n      currentFile.permissions = permissionsObj;\n      this.store.SelectFile(currentFile);\n    }\n  }\n  async OnRemove(items: string[]): Promise<void> {\n    return this.removeMultiple(items);\n  }\n  async UpdateList(\n    res: CoreTypes.ResBodyList,\n    directoryPath: string\n  ): Promise<void> {\n    this.store.SetDirectoryFiles(res.result, directoryPath);\n  }\n\n  public getNextFreeFoldernameRecursively(\n    inputDir: string,\n    cwd: string\n  ): string {\n    const folderPath = EnsureTrailingSlash(inputDir);\n    const exists = this.store.exists(folderPath, cwd);\n    if (!exists) {\n      return inputDir;\n    }\n    const nextPath = Add2ToPathDir(folderPath);\n    return this.getNextFreeFoldernameRecursively(nextPath, cwd);\n  }\n\n  private async removeSingleFromList(filePath: string) {\n    const directoryPath = path.dirname(filePath);\n    const currentFiles = this.store.GetCached(filePath);\n    const itemName = this.GetFileNameFromPath(filePath);\n    const cachedFilesWithout = currentFiles.filter(f => f.name !== itemName);\n    this.store.SetDirectoryFiles(cachedFilesWithout, directoryPath);\n  }\n\n  private EnsureNoTrailingSlash(inputPath: string): string {\n    const hasTrailing = inputPath.slice(-1) === '/';\n    const pathParsed = hasTrailing ? inputPath.slice(0, -1) : inputPath;\n    return pathParsed;\n  }\n\n  private GetFileNameFromPath(inputPath: string): string {\n    const safePath = inputPath || '';\n    const parsedPath = this.EnsureNoTrailingSlash(safePath);\n    const basename = parsedPath.split('/').pop();\n    return basename;\n  }\n\n  private async removeMultiple(filePaths: string[]) {\n    const firstPath = filePaths[0];\n    if (!firstPath) {\n      return;\n    }\n    const directoryPath = path.dirname(firstPath);\n    const removeSet = new Set(\n      filePaths.map(filePath => path.basename(filePath))\n    );\n    const currentFiles = this.store.GetCached(directoryPath);\n    const cachedFilesWithout = currentFiles.filter(f => !removeSet.has(f.name));\n    this.store.SetDirectoryFiles(cachedFilesWithout, directoryPath);\n    this.store.SetPath(directoryPath);\n  }\n\n  public get $FilesWithIcons(): Observable<CoreTypes.ResFile[]> {\n    return this.$currentFiles.pipe(\n      map(files => (files ? files : [])),\n      map(files => files.map(file => this.addIconPath(file))),\n      map(files =>\n        files.map(file => {\n          return { ...file };\n        })\n      )\n    );\n  }\n\n  public get $NoParentFolder() {\n    return this.$currentPath.pipe(\n      filter(p => !!p),\n      map(p => p.split('/').length < 2)\n    );\n  }\n\n  public onSelectItem(item: CoreTypes.ResFile): any {\n    this.store.SelectFile(item);\n  }\n\n  public CurrentFiles() {\n    return this.store.CurrentFiles();\n  }\n\n  private addIconPath(file: CoreTypes.ResFile) {\n    if (file.type === 'file') {\n      file['icon'] = this.iconResolver.getFileIconUrl(file.name);\n    } else {\n      file['icon'] = this.iconResolver.getFolderIconUrl(file.name);\n    }\n    return file;\n  }\n\n  CloneProvider(): ClientFileSystemService {\n    const newClone = new ClientFileSystemService(\n      this.logger,\n      this.iconResolver\n    );\n    const newStore = this.store.CloneStore();\n    newClone.SetStore(newStore);\n    return newClone;\n  }\n}\n","import { CoreTypes } from '../../core-types';\nimport path from 'path-browserify';\n\n// temporary directory for the client while it refreshes\nexport function MakeClientDirectory(\n  name: string,\n  fullPath: string\n): CoreTypes.ResFile {\n  return {\n    name: name,\n    fullPath: fullPath,\n    rightsFirebase: [],\n    permissions: {} as any,\n    size: null,\n    date: new Date().toISOString(),\n    type: 'dir'\n  };\n}\n\nexport function MakeClientFile(\n  fullPath: string\n): CoreTypes.ResFile {\n  const fileName = path.basename(fullPath);\n  return {\n    name: fileName,\n    fullPath: fullPath,\n    rightsFirebase: [],\n    permissions: {} as any,\n    size: null,\n    date: new Date().toISOString(),\n    type: 'file'\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilemanagerStatusService {\n  private _ActiveRequestsMap = new BehaviorSubject<ActiveRequestsMap>({});\n  get ActiveRequestsMap(): Observable<ActiveRequestsMap> {\n    return this._ActiveRequestsMap;\n  }\n\n  public UpdateStatus(key: string, status: RequestStatus, error?: string) {\n    console.log('UpdateStatus()', { key, status, error });\n    let currentValue: ActiveRequestsMap;\n    currentValue = this._ActiveRequestsMap.value;\n    if (!currentValue[key]) {\n      currentValue[key] = {};\n    }\n    currentValue[key].status = status;\n    currentValue[key].error = error;\n    this._ActiveRequestsMap.next(currentValue);\n  }\n}\n\nexport interface ActiveRequestsMap {\n  [key: string]: {\n    status?: RequestStatus;\n    error?: string;\n  };\n}\n\nexport type RequestStatus = 'SENDING' | 'SUCCESS' | 'FAILED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { OptimisticFilesystem } from './optimistic-filesystem.interface';\nimport { ClientFileSystemService } from './client-filesystem.service';\nimport { take, takeUntil, tap, auditTime } from 'rxjs/operators';\nimport { LoggerService } from '../logging/logger.service';\nimport path from 'path-browserify';\nimport { NotificationService } from './notification.service';\nimport { Subject } from 'rxjs';\nimport { CoreTypes, FileSystemProvider } from '../../../core-types';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { FilemanagerStatusService } from '../state/status.service';\n\n// tslint:disable:member-ordering\n\n@Injectable()\nexport class OptimisticFilesystemService\n  implements OptimisticFilesystem, OnDestroy {\n  private serverFilesystem: FileSystemProvider;\n  private clientFilesystem: ClientFileSystemService;\n\n  private static instanceCount = 0;\n  private instanceCountIncr() {\n    OptimisticFilesystemService.instanceCount++;\n    this.logger.info('new instance created', { instances: this.instances });\n  }\n  private instanceCountDecr() {\n    OptimisticFilesystemService.instanceCount--;\n    this.logger.info('instance destroyed', { instances: this.instances });\n  }\n  get instances() {\n    return OptimisticFilesystemService.instanceCount;\n  }\n\n  constructor(\n    private logger: LoggerService,\n    private notifications: NotificationService,\n    private status: FilemanagerStatusService\n  ) {\n    this.instanceCountIncr();\n  }\n\n  ngOnDestroy() {\n    this.instanceCountDecr();\n  }\n\n  get $CurrentPath() {\n    return this.clientFilesystem.$currentPath;\n  }\n\n  get $SelectedFile() {\n    return this.clientFilesystem.$selectedFile;\n  }\n\n  get $FilesWithIcons() {\n    return this.clientFilesystem.$FilesWithIcons;\n  }\n\n  private refreshEmitter = new Subject<string>();\n  private destroyed = new Subject();\n\n  initialize(\n    serverFilesystem: FileSystemProvider,\n    clientFilesystem: ClientFileSystemService\n  ) {\n    this.logger.info('initializing...', { serverFilesystem, clientFilesystem });\n    this.serverFilesystem = serverFilesystem;\n    this.clientFilesystem = clientFilesystem;\n\n    this.destroyed.next();\n    this.refreshEmitter\n      .pipe(\n        takeUntil(this.destroyed),\n        auditTime(800),\n        tap(async currentPath => {\n          return this.clientFilesystem.OnList(currentPath);\n        })\n      )\n      .subscribe(async currentPath => {\n        return this.updateListFromServer(currentPath);\n      });\n  }\n\n  private reportError(error: Error, msg: string, title: string) {\n    this.logger.error('optimistic-filesystem:', { error, title, msg });\n    this.notifications.notify(error.message, title);\n  }\n\n  private async updateListFromServer(directoryPath: string) {\n    try {\n      this.status.UpdateStatus(directoryPath, 'SENDING');\n      this.logger.info('updateListFromServer', { directoryPath });\n      const apiResult = await this.serverFilesystem.List(directoryPath);\n      await this.clientFilesystem.UpdateList(apiResult, directoryPath);\n      const currentDirectory = await this.$CurrentPath\n        .pipe(take(1))\n        .toPromise();\n      if (currentDirectory === directoryPath) {\n        await Promise.all([\n          this.clientFilesystem.OnList(directoryPath),\n          this.selectFirstInCurrentDirectory()\n        ]);\n      }\n      this.status.UpdateStatus(directoryPath, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot get directory list', 'List Error');\n      this.status.UpdateStatus(directoryPath, 'FAILED', error);\n    }\n  }\n\n  async HandleList(directoryPath: string): Promise<any> {\n    this.refreshEmitter.next(directoryPath);\n  }\n  async HandleCreateFolder(\n    newPath: string,\n    disableNoClobber?: boolean\n  ): Promise<any> {\n    try {\n      this.status.UpdateStatus(newPath, 'SENDING');\n      this.logger.info('HandleCreateFolder', { newPath });\n      await Promise.all([\n        this.clientFilesystem.OnCreateFolder(newPath, disableNoClobber),\n        this.serverFilesystem.CreateFolder(newPath, disableNoClobber)\n      ]);\n      this.status.UpdateStatus(newPath, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot create folder', 'Create Folder Error');\n      this.status.UpdateStatus(newPath, 'FAILED', error);\n      await this.clientFilesystem.OnRemove([newPath]);\n    }\n  }\n  async HandleUpload(uploadedFiles: string[]): Promise<any> {\n    this.status.UpdateStatus('HandleUpload', 'SENDING');\n    this.logger.info('HandleUpload', { uploadedFiles });\n    const uploadAllPromise = uploadedFiles.map(f => this.serverFilesystem.Upload(f));\n    const blankPermissionsObj: CoreTypes.FilePermissionsObject = {\n      others: 'read/write',\n      readers: [],\n      writers: []\n    };\n    await Promise.all([\n      this.serverFilesystem.SetPermissionsObjectMultiple(uploadedFiles, blankPermissionsObj, true),\n      this.clientFilesystem.OnUploadedFiles(uploadedFiles),\n      uploadAllPromise\n    ]);\n    this.status.UpdateStatus('HandleUpload', 'SUCCESS');\n  }\n  async HandleCopy(singleFileName: string, newPath: string): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleCopy' + singleFileName, 'SENDING');\n      this.logger.info('HandleCopy', { singleFileName, newPath });\n      await Promise.all([\n        this.clientFilesystem.OnCopy(singleFileName, newPath),\n        this.serverFilesystem.Copy(singleFileName, newPath)\n      ]);\n      this.status.UpdateStatus('HandleCopy' + singleFileName, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot copy item', 'Copy Error');\n      this.status.UpdateStatus('HandleCopy' + singleFileName, 'FAILED', error);\n      return this.clientFilesystem.OnRemove([newPath]);\n    }\n  }\n  async HandleMove(item: string, newPath: string): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleMove' + item, 'SENDING');\n      this.logger.info('HandleMove', { item, newPath });\n      await Promise.all([\n        this.clientFilesystem.OnMove(item, newPath),\n        this.serverFilesystem.Move(item, newPath)\n      ]);\n      this.status.UpdateStatus('HandleMove' + item, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot move item', 'Move Error');\n      this.status.UpdateStatus('HandleMove' + item, 'FAILED');\n      return this.clientFilesystem.OnRemove([newPath]);\n    }\n  }\n  async HandleRename(item: string, newItemPath: string): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleRename' + item, 'SENDING');\n      this.logger.info('HandleRename', { item, newItemPath });\n      await Promise.all([\n        this.clientFilesystem.OnRename(item, newItemPath),\n        this.serverFilesystem.Rename(item, newItemPath)\n      ]);\n      this.status.UpdateStatus('HandleRename' + item, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot rename item', 'Rename Error');\n      this.status.UpdateStatus('HandleRename' + item, 'FAILED');\n      return this.clientFilesystem.OnRename(newItemPath, item);\n    }\n  }\n  async HandleEdit(item: string, content: string): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleEdit' + item, 'SENDING');\n      this.logger.info('HandleEdit', { item, content });\n      await Promise.all([\n        this.clientFilesystem.OnEdit(item, content),\n        this.serverFilesystem.Edit(item, content)\n      ]);\n      this.status.UpdateStatus('HandleEdit' + item, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot edit item', 'Edit Error');\n      this.status.UpdateStatus('HandleEdit' + item, 'FAILED');\n    }\n  }\n  async HandleGetcontent(item: string): Promise<string> {\n    try {\n      this.status.UpdateStatus('HandleGetcontent' + item, 'SENDING');\n      this.logger.info('HandleGetcontent', { item });\n      await this.clientFilesystem.OnGetcontent(item);\n      const response = await this.serverFilesystem.Getcontent(item);\n      this.status.UpdateStatus('HandleGetcontent' + item, 'SUCCESS');\n      return response.result;\n    } catch (error) {\n      this.reportError(error, 'Cannot get item', 'Get Content Error');\n      this.status.UpdateStatus('HandleGetcontent' + item, 'FAILED');\n    }\n  }\n  async HandleSetPermissions(\n    item: string,\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleSetPermissions' + item, 'SENDING');\n      this.logger.info('HandleSetPermissions', {\n        item,\n        role,\n        entity,\n        recursive\n      });\n      await Promise.all([\n        this.clientFilesystem.OnSetPermissions(item, role, entity, recursive),\n        this.serverFilesystem.SetPermissions(item, role, entity, recursive)\n      ]);\n      this.status.UpdateStatus('HandleSetPermissions' + item, 'SUCCESS');\n    } catch (error) {\n      this.reportError(\n        error,\n        'Cannot set permissions to item',\n        'Permissions Error'\n      );\n      this.status.UpdateStatus('HandleSetPermissions' + item, 'FAILED');\n    }\n  }\n  async HandleMoveMultiple(items: string[], newPath: string): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleMoveMultiple' + items, 'SENDING');\n      this.logger.info('HandleMoveMultiple', { items, newPath });\n      await Promise.all([\n        this.clientFilesystem.OnMoveMultiple(items, newPath),\n        this.serverFilesystem.MoveMultiple(items, newPath)\n      ]);\n      this.status.UpdateStatus('HandleMoveMultiple' + items, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot move items', 'Move Error');\n      this.status.UpdateStatus('HandleMoveMultiple' + items, 'FAILED');\n    }\n  }\n  async HandleCopyMultiple(items: string[], newPath: string): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleCopyMultiple' + items, 'SENDING');\n      this.logger.info('HandleCopyMultiple', { items, newPath });\n      await Promise.all([\n        this.clientFilesystem.OnCopyMultiple(items, newPath),\n        this.serverFilesystem.CopyMultiple(items, newPath)\n      ]);\n      this.status.UpdateStatus('HandleCopyMultiple' + items, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot copy items', 'Copy Error');\n      this.status.UpdateStatus('HandleCopyMultiple' + items, 'FAILED');\n    }\n  }\n  async HandleSetPermissionsMultiple(\n    items: string[],\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<any> {\n    try {\n      this.status.UpdateStatus(\n        'HandleSetPermissionsMultiple' + items,\n        'SENDING'\n      );\n      this.logger.info('HandleSetPermissionsMultiple', {\n        items,\n        role,\n        entity,\n        recursive\n      });\n      await Promise.all([\n        this.clientFilesystem.OnSetPermissionsMultiple(\n          items,\n          role,\n          entity,\n          recursive\n        ),\n        this.serverFilesystem.SetPermissionsMultiple(\n          items,\n          role,\n          entity,\n          recursive\n        )\n      ]);\n      this.status.UpdateStatus(\n        'HandleSetPermissionsMultiple' + items,\n        'SUCCESS'\n      );\n    } catch (error) {\n      this.reportError(\n        error,\n        'Cannot set permissions to items',\n        'Permissions Error'\n      );\n      this.status.UpdateStatus(\n        'HandleSetPermissionsMultiple' + items,\n        'FAILED'\n      );\n    }\n  }\n  async HandleSetPermissionsObjectMultiple(\n    items: string[],\n    permissionsObj: CoreTypes.FilePermissionsObject,\n    recursive?: boolean\n  ): Promise<any> {\n    try {\n      this.status.UpdateStatus(\n        'HandleSetPermissionsObjectMultiple' + items,\n        'SENDING'\n      );\n      this.logger.info('HandleSetPermissionsMultiple', {\n        items,\n        permissionsObj,\n        recursive\n      });\n      await Promise.all([\n        this.clientFilesystem.OnSetPermissionsObjectMultiple(\n          items,\n          permissionsObj,\n          recursive\n        ),\n        this.serverFilesystem.SetPermissionsObjectMultiple(\n          items,\n          permissionsObj,\n          recursive\n        )\n      ]);\n      this.status.UpdateStatus(\n        'HandleSetPermissionsObjectMultiple' + items,\n        'SUCCESS'\n      );\n    } catch (error) {\n      this.reportError(\n        error,\n        'Cannot set permissions to items',\n        'Permissions Error'\n      );\n      this.status.UpdateStatus(\n        'HandleSetPermissionsObjectMultiple' + items,\n        'FAILED'\n      );\n    }\n  }\n  async HandleRemove(items: string[]): Promise<any> {\n    try {\n      this.status.UpdateStatus('HandleRemove' + items, 'SENDING');\n      this.logger.info('HandleRemove', { items });\n      await Promise.all([\n        this.clientFilesystem.OnRemove(items),\n        this.serverFilesystem.Remove(items)\n      ]);\n      this.status.UpdateStatus('HandleRemove' + items, 'SUCCESS');\n    } catch (error) {\n      this.reportError(error, 'Cannot remove items', 'Remove Error');\n      this.status.UpdateStatus('HandleRemove' + items, 'FAILED');\n    }\n  }\n\n  async HandleNavigateUp(): Promise<any> {\n    const uuid = uuidv4();\n    try {\n      this.status.UpdateStatus('HandleNavigateUp' + uuid, 'SENDING');\n      this.logger.info('HandleNavigateUp');\n      const currentPath = await this.$CurrentPath.pipe(take(1)).toPromise();\n      const parentPath = path.dirname(currentPath);\n      await this.HandleList(parentPath);\n      this.status.UpdateStatus('HandleNavigateUp' + uuid, 'SUCCESS');\n    } catch (error) {\n      this.reportError(\n        error,\n        'Cannot navigate to parent directory',\n        'Navigate Error'\n      );\n      this.status.UpdateStatus('HandleNavigateUp' + uuid, 'FAILED');\n      throw new Error(error.message);\n    }\n  }\n\n  async onSelectItem(file: CoreTypes.ResFile) {\n    this.clientFilesystem.onSelectItem(file);\n  }\n\n  GetItemByName(filePath: string) {\n    const currentFiles = this.clientFilesystem.CurrentFiles();\n    const match = currentFiles.find(f => f.fullPath === filePath);\n    return match;\n  }\n\n  onSelectItemByName(filePath: string) {\n    const match = this.GetItemByName(filePath);\n    this.clientFilesystem.onSelectItem(match);\n  }\n\n  private async selectFirstInCurrentDirectory() {\n    const currentFiles = this.clientFilesystem.CurrentFiles();\n    const firstSelected = [...currentFiles].shift();\n    this.clientFilesystem.onSelectItem(firstSelected);\n  }\n\n  CloneProvider(): OptimisticFilesystemService {\n    const newClone = new OptimisticFilesystemService(\n      this.logger,\n      this.notifications,\n      this.status\n    );\n    newClone.initialize(\n      this.serverFilesystem.CloneProvider(),\n      this.clientFilesystem.CloneProvider()\n    );\n    return newClone;\n  }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>Set Permissions</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <div>\n          <p>Would you like to set permissions for this folder?</p>\n        </div>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Yes\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styleUrls: ['../shared-utility-styles.scss'],\n})\nexport class AppDialogConfirmationComponent {\n  constructor(public dialogRef: MatDialogRef<AppDialogConfirmationComponent>) {}\n\n  onSubmit() {\n    this.dialogRef.close(true);\n  }\n  onCancel() {\n    this.dialogRef.close(false);\n  }\n}\n","import * as path from 'path-browserify';\nimport { CoreTypes } from '../../../core-types';\nimport { EnsureNoTrailingSlash, EnsureTrailingSlash } from '../../utils/path-helpers';\n\nexport function MakeItem2(itemPath: string): CoreTypes.ResFile {\n  return {\n    name: path.basename(itemPath),\n    fullPath: itemPath,\n    rightsFirebase: [],\n    permissions: {\n      others: 'read/write',\n      readers: ['Example Reader'],\n      writers: ['Example Writer', 'Managers']\n    },\n    size: '111',\n    date: new Date().toISOString(),\n    type: itemPath.endsWith('/') ? 'dir' : 'file'\n  };\n}\n\nexport function MakeFile(itemPath: string): CoreTypes.ResFile {\n  const filePath = EnsureNoTrailingSlash(itemPath);\n  return MakeItem2(filePath);\n}\n\nexport function MakeDir(itemPath: string): CoreTypes.ResFile {\n  const dirPath = EnsureTrailingSlash(itemPath);\n  return MakeItem2(dirPath);\n}\n\nexport const stubFiles = [\n  MakeFile('/image1.png'),\n  MakeFile('/image2.jpeg'),\n  MakeFile('/subfile.txt'),\n  MakeFile('/subfile.mp3'),\n  MakeFile('/subfile.mp4'),\n  MakeFile('/tables.csv'),\n  MakeFile('/time.docx'),\n  MakeDir('/emptyFolder/'),\n  MakeDir('/subfolder/'),\n  MakeFile('/subfolder/file.txt'),\n  MakeFile('/subfolder/file.png'),\n\n  MakeDir('/subfolder/xsub1/'),\n  MakeDir('/subfolder/ysub1/'),\n  MakeDir('/subfolder/2sub1/'),\n  MakeDir('/subfolder/1sub1/'),\n  MakeDir('/subfolder/sub1/'),\n  MakeFile('/subfolder/sub1/file.txt'),\n  MakeDir('/subfolder/sub1/sub1/'),\n  MakeFile('/subfolder/sub1/sub11/file.txt'),\n  MakeDir('/subfolder/sub1/sub11/sub111/'),\n  MakeFile('/subfolder/sub1/sub11/sub111/file.txt'),\n  MakeDir('/subfolder/sub1/sub12/'),\n  MakeFile('/subfolder/sub1/sub12/file.txt'),\n  MakeDir('/subfolder/sub1/sub12/sub112/'),\n  MakeFile('/subfolder/sub1/sub12/sub112/file.txt'),\n\n  MakeDir('/subfolder/sub2/'),\n  MakeFile('/subfolder/sub2/file.txt'),\n  MakeDir('/subfolder/sub2/sub21/'),\n  MakeFile('/subfolder/sub2/sub21/file.txt'),\n  MakeDir('/subfolder/sub2/sub21/sub211/'),\n  MakeFile('/subfolder/sub2/sub21/sub211/file.txt'),\n  MakeDir('/subfolder/sub2/sub22/'),\n  MakeFile('/subfolder/sub2/sub22/file.txt'),\n  MakeDir('/subfolder/sub2/sub22/sub221/'),\n  MakeFile('/subfolder/sub2/sub22/sub221/file.txt')\n];\n","import { Injectable } from '@angular/core';\nimport { take, map } from 'rxjs/operators';\nimport path from 'path-browserify';\nimport { FileSystemProvider, CoreTypes } from '../../../core-types';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport {\n  RenameDialogInterface,\n  AppDialogRenameComponent,\n} from '../dialogs/dialog-rename.component';\nimport {\n  CopyDialogInterface,\n  AppDialogCopyComponent,\n} from '../dialogs/dialog-copy-or-move.component';\nimport {\n  PermissionsObjectDialogInterface,\n  PermissionsObjectDialogResponseInterface,\n  AppDialogPermissionsSetObjectComponent,\n} from '../dialogs/dialog-permissions-setobject.component';\nimport {\n  UploadDialogInterface,\n  UploadDialogResponseInterface,\n  AppDialogUploadFilesComponent,\n} from '../dialogs/dialog-upload.component';\nimport { AppDialogNewFolderComponent } from '../dialogs/dialog-new-folder.component';\nimport { FileManagerConfig } from '../../configuration/client-configuration';\nimport { ClientFileSystemService } from '../../services/pure/client-filesystem.service';\nimport { OptimisticFilesystemService } from '../../services/pure/optimistic-filesystem.service';\nimport { NotificationService } from '../../services/pure/notification.service';\nimport { AppDialogConfirmationComponent } from '../dialogs/dialog-confirmation.component';\nimport { MakeDir } from '../../services/stub/stub-files';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Injectable()\nexport class ActionHandlersService {\n  private fileSystem: FileSystemProvider;\n  private config: FileManagerConfig;\n\n  // Getters\n\n  get $CurrentPath() {\n    return this.optimisticFs.$CurrentPath;\n  }\n\n  public async GetCurrentPath() {\n    const current = await this.$CurrentPath.pipe(take(1)).toPromise();\n    return current || '';\n  }\n\n  public ConvertToRelativePath(directoryPath: string): string {\n    const rootLength = (this.config.virtualRoot || '').length;\n    return (directoryPath || '').slice(rootLength);\n  }\n  public GetRootPath(): string {\n    return this.config.virtualRoot || '';\n  }\n\n  get $CurrentPathIsRoot() {\n    return this.$CurrentPath.pipe(map((p) => p === this.config.virtualRoot));\n  }\n\n  get $SelectedFile() {\n    return this.optimisticFs.$SelectedFile;\n  }\n\n  get $FilesWithIcons() {\n    return this.optimisticFs.$FilesWithIcons;\n  }\n\n  constructor(\n    private clientFilesystem: ClientFileSystemService,\n    private optimisticFs: OptimisticFilesystemService,\n    private dialog: MatDialog,\n    private logger: LoggerService,\n    private notifications: NotificationService\n  ) {}\n\n  public async init(fileSystem: FileSystemProvider, config: FileManagerConfig) {\n    this.config = config;\n    this.fileSystem = fileSystem;\n    this.logger.info('init()', { fileSystem, config });\n    this.optimisticFs.initialize(this.fileSystem, this.clientFilesystem);\n    try {\n      await this.clientFilesystem.OnList(config.initialPath);\n    } catch (error) {\n      this.logger.error('init() OnNewFolderClobber: error', error, {\n        fileSystem,\n        config,\n      });\n    }\n  }\n\n  public async OnRename(file: CoreTypes.ResFile) {\n    const data: RenameDialogInterface = {\n      currentPath: file.fullPath,\n    };\n    this.logger.info('OnRename', { data });\n    const renamedPath = await this.openDialog(AppDialogRenameComponent, data);\n    if (!renamedPath) {\n      this.notifications.notifyCancelled();\n      return;\n    }\n    try {\n      await this.optimisticFs.HandleRename(file.fullPath, renamedPath);\n      await this.RefreshExplorer();\n      setTimeout(() => {\n        this.optimisticFs.onSelectItemByName(renamedPath);\n      }, 300);\n    } catch (error) {\n      this.logger.error('OnRename', { error });\n      this.notifications.notify(error.message, 'Rename Error');\n    }\n  }\n\n  public async OnMoveMultiple(files: CoreTypes.ResFile[]) {\n    const data: CopyDialogInterface = {\n      files: files,\n      isCopy: false,\n      actionHandler: this,\n    };\n    const newFolderPath = await this.openDialog(AppDialogCopyComponent, data);\n    if (!newFolderPath) {\n      this.notifications.notifyCancelled();\n      return;\n    }\n    try {\n      const filePaths = files.map((f) => f.fullPath);\n      await this.optimisticFs.HandleMoveMultiple(filePaths, newFolderPath);\n      await this.RefreshExplorer();\n    } catch (error) {\n      this.logger.error('OnMoveMultiple', { error });\n      this.notifications.notify(error.message, 'Move Error');\n    }\n  }\n\n  public async OnCopyMultiple(files: CoreTypes.ResFile[]) {\n    const data: CopyDialogInterface = {\n      files: files,\n      isCopy: true,\n      actionHandler: this,\n    };\n    const newFolderPath = await this.openDialog(AppDialogCopyComponent, data);\n    this.logger.info('OnCopyMultiple', { files, newFolderPath });\n    if (!newFolderPath) {\n      this.notifications.notifyCancelled();\n      return;\n    }\n    try {\n      const filePaths = files.map((f) => f.fullPath);\n      await this.optimisticFs.HandleCopyMultiple(filePaths, newFolderPath);\n      await this.RefreshExplorer();\n    } catch (error) {\n      this.logger.error('OnCopyMultiple', { error });\n      this.notifications.notify(error.message, 'Copy Error');\n    }\n  }\n\n  private checkCanAddPermissions() {\n    if (!this.config.users) {\n      throw new Error('The \"config.users\" property was not defined');\n    }\n    if (!this.config.groups) {\n      throw new Error('The \"config.groups\" property was not defined');\n    }\n  }\n\n  public async OnSetPermissionsMultiple(files: CoreTypes.ResFile[]) {\n    return this.OnSetPermissionsObjectMultiple(files);\n  }\n\n  public async OnSetPermissionsObjectMultiple(files: CoreTypes.ResFile[]) {\n    const data: PermissionsObjectDialogInterface = {\n      files: files,\n      config: this.config,\n    };\n    try {\n      this.checkCanAddPermissions();\n    } catch (error) {\n      this.notifications.notify(error.message, 'Permissions Error');\n      return;\n    }\n\n    const res: PermissionsObjectDialogResponseInterface = await this.openDialog(\n      AppDialogPermissionsSetObjectComponent,\n      data\n    );\n    if (!res) {\n      this.notifications.notifyCancelled();\n      return;\n    }\n    try {\n      const filePaths = files.map((f) => f.fullPath);\n      await this.optimisticFs.HandleSetPermissionsObjectMultiple(\n        filePaths,\n        res.permissionsObj,\n        true\n      );\n      await this.RefreshExplorer();\n    } catch (error) {\n      this.logger.error('OnSetPermissionsMultiple', { error });\n      this.notifications.notify(error.message, 'Permissions Error');\n    }\n  }\n\n  public async OnDeleteMultiple(files: CoreTypes.ResFile[]) {\n    try {\n      const deletedPaths = files.map((f) => f.fullPath);\n      this.logger.info('deleting files', { files, deletedPaths });\n      await this.optimisticFs.HandleRemove(deletedPaths);\n      await this.RefreshExplorer();\n    } catch (error) {\n      this.logger.error('OnDeleteMultiple', { error });\n      this.notifications.notify(error.message, 'Deletion Error');\n    }\n  }\n\n  // Misc\n\n  public async OnNavigateTo(folderPath: string) {\n    this.logger.info('action-handlers.OnNavigateTo', { folderPath });\n    return this.optimisticFs.HandleList(folderPath);\n  }\n\n  public async OnNavigateToParent() {\n    this.logger.info('OnNavigateToParent');\n    await this.optimisticFs.HandleNavigateUp();\n  }\n\n  public async OnSelectItemByPath(itemPath: string) {\n    this.optimisticFs.onSelectItemByName(itemPath);\n  }\n\n  public async OnUploadFilesToCurrentDirectory() {\n    this.logger.info('onClickUpload');\n    const currentPath = await this.GetCurrentPath();\n    const data: UploadDialogInterface = {\n      currentDirectory: currentPath,\n      firebaseConfig: this.config.firebaseConfig,\n      bucketName: this.config.bucketName,\n    };\n    const res: UploadDialogResponseInterface = await this.openDialog(\n      AppDialogUploadFilesComponent,\n      data\n    );\n    if (!res) {\n      this.logger.info('onClickUpload canceled...');\n      return;\n    }\n    const filesToAdd = res.uploaded.map((f) => path.join(currentPath, f));\n    await this.optimisticFs.HandleUpload(filesToAdd);\n    await this.optimisticFs.HandleList(currentPath);\n  }\n\n  public async OnNewFolderInCurrentDirectory() {\n    this.logger.info('onClickNewFolder');\n    const newDirName = await this.openDialog(AppDialogNewFolderComponent);\n    if (!newDirName) {\n      this.logger.info('onClickNewFolder   no folder created...');\n      return;\n    }\n    await this.OnNewFolder(newDirName);\n    const setPermissions = await this.openDialog(\n      AppDialogConfirmationComponent\n    );\n\n    if (setPermissions) {\n      const currentDirectory = await this.GetCurrentPath();\n      const newDirectoryPath = path.join(currentDirectory, newDirName);\n      const folder = MakeDir(newDirectoryPath);\n      await this.OnSetPermissionsMultiple([folder]);\n    }\n  }\n\n  public async OnNewFolder(newDirName: string) {\n    const currentDirectory = await this.GetCurrentPath();\n    const newDirectoryPath = path.join(currentDirectory, newDirName);\n    await this.optimisticFs.HandleCreateFolder(newDirectoryPath);\n    await this.optimisticFs.HandleList(currentDirectory);\n  }\n\n  public async OnNewFolderClobber(newDirName: string) {\n    if (newDirName === '/') {\n      return;\n    }\n    const currentDirectory = await this.GetCurrentPath();\n    const newDirectoryPath = path.join(currentDirectory, newDirName);\n    await this.optimisticFs.HandleCreateFolder(newDirectoryPath, true);\n    await this.optimisticFs.HandleList(currentDirectory);\n  }\n\n  public async OnDownloadFile(file: CoreTypes.ResFile) {\n    const res = await this.fileSystem.GetSingle(file.fullPath);\n    const newFile = res.result.file;\n    await this.optimisticFs.onSelectItem(newFile);\n    this.initiateDownload(file.name, res.result.url);\n    const currentDirectory = await this.GetCurrentPath();\n    await this.optimisticFs.HandleList(currentDirectory);\n  }\n\n  private initiateDownload(filename: string, url: string) {\n    this.logger.info('initiateDownload...', { url });\n    const link = document.createElement('a');\n    link.download = filename;\n    link.target = '_blank';\n    link.href = url;\n    link.click();\n  }\n\n  public async RefreshExplorer() {\n    const currentPath = await this.GetCurrentPath();\n    return this.optimisticFs.HandleList(currentPath);\n  }\n\n  private async openDialog(comp: any, data?: any) {\n    const ref = this.dialog.open(comp, {\n      width: '600px',\n      hasBackdrop: true,\n      disableClose: false,\n      data: data,\n    });\n    const result = await ref.afterClosed().pipe(take(1)).toPromise();\n    return result;\n  }\n\n  public async CloneProvider(): Promise<ActionHandlersService> {\n    const cloned = new ActionHandlersService(\n      this.clientFilesystem.CloneProvider(),\n      this.optimisticFs.CloneProvider(),\n      this.dialog,\n      this.logger,\n      this.notifications\n    );\n    await cloned.init(this.fileSystem, this.config);\n    return cloned;\n  }\n\n  //Search \n  public ListCurrentPathItems(path: string): Promise<CoreTypes.ResBodyList> {\n    return this.fileSystem.List(path);\n  }\n}\n","export function sortObjectArrayCase(fieldName, direction?: 'asc' | 'desc') {\n  return (a, b) => {\n    const val_a = (a[fieldName] + '').toLowerCase();\n    const val_b = (b[fieldName] + '').toLowerCase();\n    if (val_a < val_b) {\n      return direction === 'desc' ? 1 : -1;\n    }\n    if (val_a > val_b) {\n      return direction === 'desc' ? -1 : 1;\n    }\n    return 0;\n  };\n}\n","import { OnInit, Component, Input, OnDestroy } from '@angular/core';\nimport { take, map, takeUntil, tap } from 'rxjs/operators';\nimport { Subject, BehaviorSubject, Observable, of } from 'rxjs';\nimport { FileSystemProvider, CoreTypes } from '../../../core-types';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport { ActionHandlersService } from './action-handlers.service';\nimport { ClientFileSystemService } from '../../services/pure/client-filesystem.service';\nimport { OptimisticFilesystemService } from '../../services/pure/optimistic-filesystem.service';\nimport { FileManagerConfig } from '../../configuration/client-configuration';\nimport { FilemanagerStatusService } from '../../services/state/status.service';\nimport { sortObjectArrayCase } from '../../utils/sort-helpers';\nimport { FileActionDefinition } from '../file-table/FileActionDefinition';\nimport { BulkActionDefinition } from '../actions-toolbars/BulkActionDefinition';\nimport { MainActionDefinition } from '../actions-toolbars/MainActionDefinition';\nimport { FileDetailActionDefinition } from '../file-details/FileDetailActionDefinition';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-filemanager',\n  templateUrl: 'main-file-manager.component.html',\n  styleUrls: ['main-file-manager.component.scss', '../shared-utility-styles.scss'],\n  providers: [\n    ActionHandlersService,\n    ClientFileSystemService,\n    OptimisticFilesystemService\n  ]\n  \n})\nexport class LibMainFileManagerComponent implements OnInit, OnDestroy {\n  @Input()\n  fileSystem: FileSystemProvider;\n  @Input()\n  config: FileManagerConfig;\n\n  public isFileDetailsOpen = true;\n\n  public $BulkSelected = new BehaviorSubject<CoreTypes.ResFile[]>([]);\n  public $triggerClearSelected = new Subject<void>();\n\n  public initLoaded;\n  public requestMap;\n\n  $CurrentPath: Observable<string>;\n  SelectedFile: CoreTypes.ResFile;\n\n  destroyed = new Subject();\n\n  folderActions: FileActionDefinition[];\n  fileActions: FileActionDefinition[];\n  bulkActions: BulkActionDefinition[];\n  mainActions: MainActionDefinition[];\n\n  fileDetailActions: FileDetailActionDefinition[];\n\n  folders$: Observable<CoreTypes.ResFile[]>;\n  files$: Observable<CoreTypes.ResFile[]>;\n\n  enableSearch: boolean = false;\n  searchForm: FormGroup;\n  searchKeyword: string = '';\n  seachResultDocuments: CoreTypes.ResFile[] = [];\n  seachResultFolders: CoreTypes.ResFile[] = [];\n  documentsShow: number = 10;\n  foldersShow: number = 10;\n  isSearching: boolean = false;\n  showSearchingSpinner: boolean = false;\n\n  constructor(\n    private actionHandlers: ActionHandlersService,\n    private logger: LoggerService,\n    private status: FilemanagerStatusService,\n  ) {\n    this.requestMap = this.status.ActiveRequestsMap;\n    this.searchForm = new FormGroup({\n      searchKeyword: new FormControl('', [Validators.minLength(3)]),\n    });\n  }\n\n  // Getters\n\n  get $status() {\n    return this.status.ActiveRequestsMap.pipe(\n      map(requests => {\n        return Object.keys(requests).map(k => requests[k].status);\n      })\n    );\n  }\n\n  get $hasSending() {\n    return this.$status.pipe(\n      map(s => !!s.find(status => status === 'SENDING'))\n    );\n  }\n\n  get $hasFailed() {\n    return this.$status.pipe(map(s => !!s.find(status => status === 'FAILED')));\n  }\n\n  async ngOnInit() {\n    if (!this.fileSystem) {\n      throw new Error(\n        '<ngx-filemanager> must have input selector [fileSystem] set'\n      );\n    }\n    if (!this.config) {\n      throw new Error(\n        '<ngx-filemanager> must have input selector [config] set'\n      );\n    }\n    if (!this.config.virtualRoot) {\n      console.warn(\n        '<ngx-filemanager> warning config.virtualRoot not set, using bucket root \"/\"'\n      );\n      this.config.virtualRoot = '/';\n    }\n    if (this.config.virtualRoot.endsWith('/')) {\n      this.config.virtualRoot = this.config.virtualRoot.slice(0, -1);\n    }\n    if (!this.config.initialPath) {\n      console.warn(\n        '<ngx-filemanager> warning config.initialPath not set, using virtualRoot: ' +\n          this.config.virtualRoot\n      );\n      this.config.initialPath = this.config.virtualRoot;\n    }\n    await this.actionHandlers.init(this.fileSystem, this.config);\n    await this.actionHandlers.OnNavigateTo(this.config.virtualRoot);\n    this.$CurrentPath = this.actionHandlers.$CurrentPath;\n    this.actionHandlers.$SelectedFile\n      .pipe(\n        takeUntil(this.destroyed),\n        tap(selectedFile => {\n          console.log('this.$SelectedFile.pipe', { selectedFile });\n          this.SelectedFile = null;\n          setTimeout(() => {\n            this.SelectedFile = selectedFile;\n          });\n        })\n      )\n      .subscribe();\n    this.makeConfig();\n    this.initLoaded = true;\n    this.enableSearch = !!this.config.enableSearch || false;\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  makeConfig() {\n    this.fileActions = [\n      {\n        label: 'Download',\n        icon: 'file_download',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnDownloadFile(file)\n      },\n      {\n        label: 'Copy',\n        icon: 'content_copy',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnCopyMultiple([file])\n      },\n      {\n        label: 'Move',\n        icon: 'forward',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnMoveMultiple([file])\n      },\n      {\n        label: 'Rename',\n        icon: 'border_color',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnRename(file)\n      },\n      {\n        label: 'Permissions',\n        icon: 'lock_outline',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnSetPermissionsMultiple([file])\n      },\n      {\n        label: 'Delete',\n        icon: 'delete',\n        color: 'warn',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnDeleteMultiple([file])\n      }\n    ];\n    this.folderActions = [\n      {\n        label: 'Copy',\n        icon: 'content_copy',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnCopyMultiple([file])\n      },\n      {\n        label: 'Move',\n        icon: 'forward',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnMoveMultiple([file])\n      },\n      {\n        label: 'Rename',\n        icon: 'border_color',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnRename(file)\n      },\n      {\n        label: 'Permissions',\n        icon: 'lock_outline',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnSetPermissionsMultiple([file])\n      },\n      {\n        label: 'Delete',\n        icon: 'delete',\n        color: 'warn',\n        onClick: async (file: CoreTypes.ResFile) =>\n          this.actionHandlers.OnDeleteMultiple([file])\n      }\n    ];\n    this.bulkActions = [\n      {\n        label: 'Cancel',\n        icon: 'clear',\n        onClick: async (item: CoreTypes.ResFile[]) => this.ClearBulkSelected()\n      },\n      {\n        label: 'Copy',\n        icon: 'content_copy',\n        onClick: (items: CoreTypes.ResFile[]) =>\n          this.actionHandlers.OnCopyMultiple([...items])\n      },\n      {\n        label: 'Move',\n        icon: 'forward',\n        onClick: (items: CoreTypes.ResFile[]) =>\n          this.actionHandlers.OnMoveMultiple(items)\n      },\n      {\n        label: 'Set Permissions',\n        icon: 'lock_outline',\n        onClick: (items: CoreTypes.ResFile[]) =>\n          this.actionHandlers.OnSetPermissionsObjectMultiple(items),\n        $disabled: of(!this.config.isAdmin)\n      },\n      {\n        label: 'Delete',\n        icon: 'delete',\n        color: 'warn',\n        onClick: (items: CoreTypes.ResFile[]) =>\n          this.actionHandlers.OnDeleteMultiple(items),\n        $disabled: of(!this.config.isAdmin)\n      }\n    ];\n    this.mainActions = [\n      {\n        label: 'Back Folder',\n        icon: 'reply',\n        onClick: async () => this.actionHandlers.OnNavigateToParent(),\n        $disabled: this.actionHandlers.$CurrentPathIsRoot\n      },\n      {\n        label: 'Refresh',\n        icon: 'refresh',\n        onClick: async () => this.actionHandlers.RefreshExplorer()\n      },\n      {\n        label: 'Upload Files',\n        icon: 'file_upload',\n        onClick: async () =>\n          this.actionHandlers.OnUploadFilesToCurrentDirectory()\n      },\n      {\n        label: 'New Folder',\n        icon: 'create_new_folder',\n        onClick: async () => this.actionHandlers.OnNewFolderInCurrentDirectory()\n      }\n    ];\n    this.fileDetailActions = [\n      {\n        label: 'Download',\n        toolTip: 'Click to Download',\n        icon: 'file_download',\n        $disabled: this.actionHandlers.$SelectedFile.pipe(map(f => !f || f.type !== 'file')),\n        onClick: async (file) => this.actionHandlers.OnDownloadFile(file)\n      },\n      {\n        label: 'Rename',\n        toolTip: 'Click to Rename',\n        icon: 'border_color',\n        $disabled: of(!this.config.isAdmin),\n        onClick: async (file) => this.actionHandlers.OnRename(file)\n      },\n      {\n        label: 'Set Permissions',\n        toolTip: 'Click to Set Permissions',\n        icon: 'lock_outline',\n        $disabled: of(!this.config.isAdmin),\n        onClick: async (file) => this.actionHandlers.OnSetPermissionsObjectMultiple([file])\n      },\n      {\n        label: 'Delete',\n        toolTip: 'Click to Delete',\n        icon: 'delete',\n        $disabled: of(!this.config.isAdmin),\n        color: 'warn',\n        onClick: async (file) => this.actionHandlers.OnDeleteMultiple([file])\n      }\n    ];\n    const allFiles$ = new BehaviorSubject<CoreTypes.ResFile[]>([]);\n    this.actionHandlers.$FilesWithIcons.subscribe(files =>\n      allFiles$.next(files)\n    );\n    this.folders$ = allFiles$.pipe(\n      tap(folders => console.log('folders', { folders })),\n      map(items =>\n        items\n          .filter(a => a.type === 'dir')\n          .sort(sortObjectArrayCase('name', 'asc'))\n      )\n    );\n    this.files$ = allFiles$.pipe(\n      tap(files => console.log('files', { files })),\n      map(items =>\n        items\n          .filter(a => a.type === 'file')\n          .sort(sortObjectArrayCase('name', 'asc'))\n      )\n    );\n  }\n\n  async onEnterFolder(itemPath: string) {\n    this.logger.info('onSelectItemDoubleClick!', { itemPath });\n    this.ClearBulkSelected();\n    return this.actionHandlers.OnNavigateTo(itemPath);\n  }\n  async onSelectedFilePath(itemPath: string) {\n    this.logger.info('onSelectItem!', { itemPath });\n    return this.actionHandlers.OnSelectItemByPath(itemPath);\n  }\n\n  public async onDetailsClickDelete(file: CoreTypes.ResFile) {\n    await this.actionHandlers.OnDeleteMultiple([file]);\n  }\n  public async onDetailsClickDownload(file: CoreTypes.ResFile) {\n    await this.actionHandlers.OnDownloadFile(file);\n  }\n  public async onDetailsClickRename(file: CoreTypes.ResFile) {\n    await this.actionHandlers.OnRename(file);\n  }\n  public async onDetailsClickSinglePermissions(file: CoreTypes.ResFile) {\n    await this.actionHandlers.OnSetPermissionsMultiple([file]);\n    await this.actionHandlers.OnSelectItemByPath(file.fullPath);\n  }\n\n  public async onClickCrumb(newPath: string) {\n    this.ClearBulkSelected();\n    this.logger.info('onClickCrumb', { newPath });\n    return this.actionHandlers.OnNavigateTo(newPath);\n  }\n\n  public ClearBulkSelected() {\n    this.$triggerClearSelected.next();\n    this.$BulkSelected.next([]);\n  }\n\n  // Search\n  public async searchAllDocumentsAndFolders(keyword: string) {\n    keyword = keyword.toLocaleLowerCase().trim();\n    if(!this.searchForm.valid){ \n      return\n    };\n    await this.initCleanSearchResults();\n    const startPath = this.actionHandlers.GetRootPath();\n    this.isSearching = true;\n    this.showSearchingSpinner = true;\n    this.iterateCurrentDocumentAndFolders(startPath, keyword, 0);\n  }\n\n  private async iterateCurrentDocumentAndFolders(currentPath: string, keyword: string, level: number) {\n      if(level > 100) {\n        this.isSearching = false;\n      }\n      if(this.showSearchingSpinner) {\n        this.showSearchingSpinner = (this.isSearching&&this.seachResultDocuments.length===0&&this.seachResultFolders.length===0&&level < 3);\n      }\n      if(!this.isSearching) {\n        return\n      }\n\n      const currentVisiableDocuments: CoreTypes.ResFile[] = (await this.actionHandlers.ListCurrentPathItems(currentPath)).result;\n      currentVisiableDocuments.forEach((item: CoreTypes.ResFile)=>{\n        console.log( item, 'item.type', item.type)\n        if(item.type==='file') {\n          if(this.checkSearchKeywordRelative(item.name, keyword)) {\n            this.seachResultDocuments.push(item);\n          }\n        } else if(item.type==='dir') {\n          if(this.checkSearchKeywordRelative(item.name, keyword)) {\n            this.seachResultFolders.push(item);\n          }\n          this.iterateCurrentDocumentAndFolders(item.fullPath, keyword, level+1);\n        }\n      });\n  }\n\n  public checkSearchKeywordRelative(targetName: string, keyword: string) {\n    return targetName.toLowerCase().includes(keyword);\n  }\n\n  public initCleanSearchResults() {\n    this.isSearching = false;\n    this.showSearchingSpinner = false;\n    return new Promise<void>((resolve)=>{\n      setTimeout(() => {\n        this.seachResultDocuments = [];\n        this.seachResultFolders = [];\n        this.foldersShow = 5;\n        this.documentsShow = 5;\n        resolve();\n      }, 10);\n    })\n  }\n\n  public onSelectedSearchItem(item: CoreTypes.ResFile) {\n    //this.initCleanSearchResults();\n    if(item.type === 'file') {\n      let fileParentPath = item.fullPath.substring(0, item.fullPath.lastIndexOf('/'));\n      this.onEnterFolder(fileParentPath);\n    } else if (item.type === 'dir') {\n      this.onEnterFolder(item.fullPath);\n    }\n  }\n}\n","import * as path from 'path-browserify';\nimport { EnsureAbsoluteDirectory } from '../../utils/path-helpers';\n\nexport interface BreadCrumb {\n  label: string;\n  path?: string;\n  icon?: string;\n  virtualPath?: string;\n}\n\nfunction MakeRootCrumb(virtualRoot): BreadCrumb {\n  return {\n    label: '',\n    icon: 'home',\n    path: virtualRoot,\n    virtualPath: '/'\n  };\n}\n\nfunction MakeWarningCrumb(virtualRoot): BreadCrumb {\n  return {\n    label: '',\n    icon: 'mood_bad',\n    path: virtualRoot,\n    virtualPath: virtualRoot\n  };\n}\n\nconst MakeCrumbs = (virtualRoot: string, absolutePath: string) => {\n  const virtualRootParsed = EnsureAbsoluteDirectory(virtualRoot);\n  const absolutePathParsed = EnsureAbsoluteDirectory(absolutePath);\n  if (absolutePathParsed.indexOf(virtualRootParsed) !== 0) {\n    console.warn('Absolute path is not within the virtualRoot', {virtualRoot, absolutePath});\n    return [MakeWarningCrumb(virtualRootParsed)];\n  }\n\n  if (absolutePathParsed === virtualRootParsed) {\n    return [MakeRootCrumb(virtualRootParsed)];\n  }\n\n  const relativeVirtualRoot = absolutePathParsed.slice(\n    virtualRootParsed.length\n  );\n  const crumbs: BreadCrumb[] = [];\n  relativeVirtualRoot\n    .split('/')\n    .filter(p => !!p)\n    .reduce((currentPath, curr) => {\n      const dirname = path.basename(currentPath);\n      const crumb = {\n        label: dirname,\n        path: EnsureAbsoluteDirectory(virtualRootParsed + currentPath),\n        virtualPath: EnsureAbsoluteDirectory(currentPath)\n      };\n      crumbs.unshift(crumb);\n      const parentPath = path.dirname(currentPath);\n      return parentPath;\n    }, relativeVirtualRoot);\n\n  crumbs.unshift(MakeRootCrumb(virtualRootParsed));\n  return crumbs;\n};\n\nexport const crumbFactory = {\n  MakeCrumbs: MakeCrumbs\n};\n","import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { crumbFactory, BreadCrumb } from './crumb-factory';\nimport { FileManagerConfig } from '../../configuration/client-configuration';\nimport { LoggerService } from '../../services/logging/logger.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'bread-crumbs',\n  template: `\n    <div class=\"flex-row align-center\">\n      <div\n        class=\"flex-row align-center\"\n        *ngFor=\"let crumb of crumbs; let first = first; let last = last\"\n      >\n        <div class=\"divider\" *ngIf=\"!first\">\n          >\n        </div>\n        <button\n          #myButton\n          class=\"crumb\"\n          mat-raised-button\n          color=\"secondary\"\n          [disabled]=\"last\"\n          (click)=\"onClickCrumb(crumb); myButton.disabled = true\"\n        >\n          <mat-icon *ngIf=\"crumb.icon\">{{ crumb.icon }}</mat-icon>\n          {{ crumb.label }}\n        </button>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppBreadCrumbsComponent {\n  crumbs: BreadCrumb[];\n\n  @Output()\n  clickedCrumb = new EventEmitter<string>();\n\n  _currentPath: string;\n  @Input()\n  set currentPath(newPath) {\n    this._currentPath = newPath;\n    this.makeCrumbs(newPath);\n  }\n  _config: FileManagerConfig;\n  @Input()\n  set config(newConfig) {\n    this._config = newConfig;\n    this.makeCrumbs(this._currentPath);\n  }\n\n  constructor(private logger: LoggerService) {}\n\n  private makeCrumbs(newPath: string) {\n    if (!this._config) {\n      return;\n    }\n    const virtualRoot = this._config.virtualRoot;\n    this.crumbs = crumbFactory.MakeCrumbs(virtualRoot, newPath || virtualRoot);\n\n    this.logger.info('makeCrumbs', {\n      crumbs: this.crumbs,\n      virtualRoot,\n      newPath\n    });\n  }\n\n  onClickCrumb(crumb: BreadCrumb) {\n    this.logger.info('onClickCrumb', { crumb });\n    this.clickedCrumb.emit(crumb.path);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BulkActionDefinition } from './BulkActionDefinition';\nimport { CoreTypes } from '../../../core-types';\nimport { Observable } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'bulk-actions',\n  template: `\n    <mat-toolbar color=\"primary\">\n      <mat-toolbar-row class=\"top-toolbar\">\n        <span class=\"top-toolbar-label\">\n          Bulk Actions\n        </span>\n      </mat-toolbar-row>\n      <mat-toolbar-row class=\"action-toolbar scroll-x\">\n        <div class=\"flex-row\" *ngIf=\"bulkSelected$ | async as selected\">\n          <div *ngFor=\"let action of bulkActions\">\n            <button\n              class=\"mr-10 flex-row align-center\"\n              mat-raised-button\n              [disabled]=\"action.$disabled | async\"\n              [color]=\"action.color\"\n              (click)=\"executeAction(action, selected)\"\n            >\n              <mat-icon>{{ action.icon }}</mat-icon>\n              {{ action.label }}\n            </button>\n          </div>\n        </div>\n      </mat-toolbar-row>\n    </mat-toolbar>\n  `,\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppBulkActionsComponent {\n  @Input()\n  bulkActions: BulkActionDefinition[];\n  @Input()\n  bulkSelected$: Observable<CoreTypes.ResFile[]>;\n  @Output()\n  clearSelected = new EventEmitter<void>();\n\n  async executeAction(\n    action: BulkActionDefinition,\n    selected: CoreTypes.ResFile[]\n  ) {\n    await action.onClick(selected);\n    this.clearSelected.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { MainActionDefinition } from './MainActionDefinition';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'main-actions',\n  template: `\n    <mat-toolbar>\n      <mat-toolbar-row class=\"top-toolbar\">\n        <span class=\"top-toolbar-label\">\n          Folder Actions\n        </span>\n      </mat-toolbar-row>\n      <mat-toolbar-row class=\"action-toolbar scroll-x\">\n        <div *ngFor=\"let action of mainActions\">\n          <button\n            class=\"mr-10 has-pointer\"\n            mat-raised-button\n            [color]=\"action.color\"\n            (click)=\"action.onClick(action)\"\n            [disabled]=\"action.$disabled | async\"\n          >\n            <mat-icon inline=\"true\">{{ action.icon }}</mat-icon>\n            {{ action.label }}\n          </button>\n        </div>\n      </mat-toolbar-row>\n    </mat-toolbar>\n  `,\n  styleUrls: ['../shared-utility-styles.scss'],\n  styles: [\n    `\n      .top-toolbar-label {\n        color: #8a8a8a;\n      }\n    `\n  ]\n})\nexport class AppMainActionsComponent {\n  @Input()\n  mainActions: MainActionDefinition[];\n}\n","export async function promiseDelay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export interface FileIcon {\n  /**\n   * Name of the icon, e.g. 'javascript'\n   */\n  name: string;\n\n  /**\n   * Define the file extensions that should use this icon.\n   * E.g. ['js']\n   */\n  fileExtensions?: string[];\n\n  /**\n   * Define if there are some static file names that should apply this icon.\n   * E.g. ['sample.js']\n   */\n  fileNames?: string[];\n\n  /**\n   * Define if there is a light icon available.\n   */\n  light?: boolean;\n\n  /**\n   * Define if there is a high contrast icon available.\n   */\n  highContrast?: boolean;\n\n  /**\n   * Define if the icon should be disabled.\n   */\n  disabled?: boolean;\n}\n\nexport interface FolderTheme {\n  /**\n   * Name of the theme\n   */\n  name: string;\n\n  /**\n   * Define the default icon for folders in a theme.\n   */\n  defaultIcon: DefaultIcon;\n\n  /**\n   * Icon for root folders.\n   */\n  rootFolder?: DefaultIcon;\n\n  /**\n   * Defines folder icons for specific folder names.\n   */\n  icons?: FolderIcon[];\n}\n\nexport interface FolderIcon {\n  /**\n   * Name of the icon, e.g. 'src'\n   */\n  name: string;\n\n  /**\n   * Define the folder names that should apply the icon.\n   * E.g. ['src', 'source']\n   */\n  folderNames: string[];\n\n  /**\n   * Define if there is a light icon available.\n   */\n  light?: boolean;\n\n  /**\n   * Define if there is a high contrast icon available.\n   */\n  highContrast?: boolean;\n\n  /**\n   * Define if the icon should be disabled.\n   */\n  disabled?: boolean;\n}\n\nexport interface DefaultIcon {\n  /**\n   * Name of the icon, e.g. 'src'\n   */\n  name: string;\n\n  /**\n   * Define if there is a light icon available.\n   */\n  light?: boolean;\n\n  /**\n   * Define if there is a high contrast icon available.\n   */\n  highContrast?: boolean;\n}\n\nexport class FileIcons {\n  /**\n   * Define the default icon for files.\n   */\n  defaultIcon: DefaultIcon;\n\n  /**\n   * Defines all folder icons.\n   */\n  icons?: FileIcon[];\n}\n\nexport const fileIcons: FileIcons = {\n  defaultIcon: { name: 'file' },\n  icons: [\n    { name: 'word', fileExtensions: ['doc', 'docx', 'rtf'] },\n    { name: 'pdf', fileExtensions: ['pdf'] },\n    { name: 'table', fileExtensions: ['xlsx', 'xls', 'csv', 'tsv'] },\n    {\n      name: 'html',\n      fileExtensions: ['html', 'htm', 'xhtml', 'html_vm', 'asp']\n    },\n    {\n      name: 'markdown',\n      fileExtensions: ['md', 'markdown', 'rst']\n    },\n    { name: 'yaml', fileExtensions: ['yaml', 'YAML-tmLanguage', 'yml'] },\n    {\n      name: 'xml',\n      fileExtensions: [\n        'xml',\n        'plist',\n        'xsd',\n        'dtd',\n        'xsl',\n        'xslt',\n        'resx',\n        'iml',\n        'xquery',\n        'tmLanguage',\n        'manifest',\n        'project'\n      ],\n      fileNames: ['.htaccess']\n    },\n    {\n      name: 'image',\n      fileExtensions: [\n        'png',\n        'jpeg',\n        'jpg',\n        'gif',\n        'svg',\n        'ico',\n        'tif',\n        'tiff',\n        'psd',\n        'psb',\n        'ami',\n        'apx',\n        'bmp',\n        'bpg',\n        'brk',\n        'cur',\n        'dds',\n        'dng',\n        'exr',\n        'fpx',\n        'gbr',\n        'img',\n        'jbig2',\n        'jb2',\n        'jng',\n        'jxr',\n        'pbm',\n        'pgf',\n        'pic',\n        'raw',\n        'webp',\n        'eps'\n      ]\n    },\n    { name: 'tex', fileExtensions: ['tex', 'cls', 'sty'] },\n    {\n      name: 'powerpoint',\n      fileExtensions: [\n        'pptx',\n        'ppt',\n        'pptm',\n        'potx',\n        'potm',\n        'ppsx',\n        'ppsm',\n        'pps',\n        'ppam',\n        'ppa'\n      ]\n    },\n    {\n      name: 'video',\n      fileExtensions: [\n        'webm',\n        'mkv',\n        'flv',\n        'vob',\n        'ogv',\n        'ogg',\n        'gifv',\n        'avi',\n        'mov',\n        'qt',\n        'wmv',\n        'yuv',\n        'rm',\n        'rmvb',\n        'mp4',\n        'm4v',\n        'mpg',\n        'mp2',\n        'mpeg',\n        'mpe',\n        'mpv',\n        'm2v'\n      ]\n    },\n    { name: 'audio', fileExtensions: ['mp3', 'flac', 'm4a', 'wma', 'aiff'] },\n    { name: 'document', fileExtensions: ['txt'] }\n  ]\n};\n\nexport const getFileIconName = (filename: string) => {\n  filename = filename.toLowerCase();\n  if (!filename || !filename.includes('.')) {\n    return fileIcons.defaultIcon.name;\n  }\n  const ext = getFileExtension(filename);\n  const matchesExt = fileIcons.icons.filter(\n    x => !!x.fileExtensions && !!x.fileExtensions.filter(y => y === ext).length\n  );\n  const matchesFilename = fileIcons.icons.filter(\n    x => !!x.fileNames && !!x.fileNames.filter(y => y === filename).length\n  );\n  if (!!matchesFilename.length) {\n    return matchesFilename[0].name;\n  } else if (!!matchesExt.length) {\n    return matchesExt[0].name;\n  }\n\n  return fileIcons.defaultIcon.name;\n};\n\nexport const isFileImage = (filename: string) =>\n  getFileIconName(filename) === 'image';\n\nexport const getFileExtension = (filename: string) => filename.split('.').pop();\n\nexport const getFileName = (filename: string) =>\n  filename.split('.').slice(-2, -1)[0];\n\nexport const getFileIcon = (filename: string) => {\n  return '/assets/fileicons/' + getFileIconName(filename) + '.svg';\n};\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FileSystemProvider, CoreTypes } from '../../../core-types';\nimport { promiseDelay } from '../../utils/delayer';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport { getFileIconName } from '../file-upload/form-file-firebase/file-icon.helper';\nimport { FileManagerConfig } from '../../configuration/client-configuration';\nimport { FileDetailActionDefinition } from './FileDetailActionDefinition';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-filemanager-file-details',\n  template: `\n    <div class=\"details-container ml-5\">\n      <div *ngIf=\"!hasInput\" class=\"none-selected\">\n        <h2>No item selected ...</h2>\n      </div>\n      <div *ngIf=\"hasInput\">\n        <mat-toolbar color=\"primary\">\n          <mat-toolbar-row class=\"title-row\">\n            <h2 *ngIf=\"isFile\">File Details</h2>\n            <h2 *ngIf=\"!isFile\">Directory Details</h2>\n          </mat-toolbar-row>\n          <mat-toolbar-row class=\"action-row\" *ngFor=\"let action of actions\">\n            <button\n              mat-raised-button\n              [matTooltip]=\"action.toolTip\"\n              [color]=\"action.color\"\n              (click)=\"action.onClick(file)\"\n              [disabled]=\"action.$disabled | async\"\n            >\n              <mat-icon>{{ action.icon }}</mat-icon>\n              <span>{{ action.label }}</span>\n            </button>\n          </mat-toolbar-row>\n        </mat-toolbar>\n        <span class=\"flex-row space-between align-top mt-5\">\n          <div>\n            <h5>Name</h5>\n            <h6 class=\"filename\">{{ file.name }}</h6>\n          </div>\n        </span>\n        <h5 class=\"mt-5\">Size</h5>\n        <h6 *ngIf=\"isFile\">{{ file.size | fileSize }}</h6>\n        <h6 *ngIf=\"!isFile&&config.folderSizePath\">{{ getFolderSize(file) | fileSize }}</h6>\n        <h5 class=\"mt-5\">Date</h5>\n        <h6>{{ file.date | date: 'short' }}</h6>\n        <span class=\"flex-row space-between align-top mt-5\">\n          <div>\n            <h5>Permissions</h5>\n            <div class=\"mb-10\">\n              <div *ngIf=\"readers?.length\">\n                <h6>Who can see this</h6>\n                <mat-chip-list>\n                  <mat-chip *ngFor=\"let entity of readers\">\n                    <mat-icon>people</mat-icon>\n                    <span>{{ entity }}</span>\n                  </mat-chip>\n                </mat-chip-list>\n              </div>\n              <div *ngIf=\"config?.showWriters && writers?.length\">\n                <h6>Who can edit this</h6>\n                <mat-chip-list>\n                  <mat-chip *ngFor=\"let entity of writers\">\n                    <mat-icon>people</mat-icon>\n                    <span>{{ entity }}</span>\n                  </mat-chip>\n                </mat-chip-list>\n              </div>\n              <div *ngIf=\"config?.showOthers && others\">\n                <h6>Everyone else can</h6>\n                <mat-chip-list>\n                  <mat-chip>\n                    {{ others }}\n                  </mat-chip>\n                </mat-chip-list>\n              </div>\n            </div>\n          </div>\n        </span>\n        <h5 class=\"mt-5\">Full Path</h5>\n        <h6>{{ file.fullPath }}</h6>\n        <h5 class=\"mt-5\">Type</h5>\n        <h6 *ngIf=\"!isFile\">Directory</h6>\n        <h6 *ngIf=\"isFile\" class=\"capitalize \">\n          {{ getFileType(file.name) }}\n        </h6>\n        <div *ngIf=\"isFile\" class=\"flex-row space-between align-top mt-5\">\n          <div>\n            <h5>Download</h5>\n            <div *ngIf=\"isImage\" class=\"preview\">\n              <i>Image Preview</i>\n              <div\n                class=\"has-pointer\"\n                (click)=\"this.clickedDownload.emit(file)\"\n              >\n                <img *ngIf=\"imageUrl\" [src]=\"imageUrl\" />\n              </div>\n            </div>\n            <div *ngIf=\"!isImage\">\n              <h6 class=\"no-preview-text\">\n                No preview available\n              </h6>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .filename {\n        padding-right: 10px;\n      }\n      .none-selected {\n        color: grey;\n        text-align: center;\n        width: 100%;\n        margin-top: 100px;\n      }\n      .mb-10 {\n        margin-bottom: 10px;\n      }\n      .mt-5 {\n        margin-top: 10px;\n      }\n      .ml-5 {\n        margin-left: 5px;\n      }\n      .no-preview-text {\n        color: grey;\n        font-decoration: italic;\n      }\n      h5 {\n        margin: 0px;\n        color: #616161;\n        font-weight: normal;\n      }\n      h6 {\n        margin: 0px;\n        font-size: 1em;\n        overflow-wrap: break-word;\n        font-weight: bold;\n        margin-bottom: 5px;\n        margin-top: 2px;\n      }\n      img {\n        max-width: 100%;\n        max-height: 400px;\n      }\n      .preview {\n        opacity: 1;\n        transition: opacity 1s;\n      }\n      .title-row {\n        height: 45px;\n        padding-left: 8px;\n      }\n      .action-row {\n        height: 45px;\n        padding-left: 8px;\n      }\n      .action-row:last-child {\n        height: 48px;\n        padding-bottom: 4px;\n      }\n    `\n  ],\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class FileDetailsComponent {\n  imageUrl: string;\n\n  _file: CoreTypes.ResFile;\n  @Input()\n  set file(newFile) {\n    this._file = newFile;\n    if (!newFile) {\n      return;\n    }\n    this.logger.info('file-details: set file', { newFile });\n    this.isFile = this.file.type === 'file';\n    this.isImage = getFileIconName(this.file.name) === 'image';\n    this.setImageUrl().catch(e => console.error(e));\n    this.setPermissions();\n  }\n  get file() {\n    return this._file;\n  }\n  @Input()\n  fileSystem: FileSystemProvider;\n  @Input()\n  config: FileManagerConfig;\n  @Input()\n  actions: FileDetailActionDefinition[];\n  @Output()\n  clickedDownload = new EventEmitter<CoreTypes.ResFile>();\n\n  others: string;\n  writers: CoreTypes.FilePermissionEntity[];\n  readers: CoreTypes.FilePermissionEntity[];\n\n  isFile: boolean;\n  isImage: boolean;\n\n  constructor(private logger: LoggerService) {}\n\n  getFileType(fileName: string) {\n    return getFileIconName(fileName);\n  }\n\n  get hasInput() {\n    return !!this.file;\n  }\n\n  async setImageUrl() {\n    this.imageUrl = null;\n    try {\n      await promiseDelay(300);\n      if (!this.hasInput || !this.isFile) {\n        return;\n      }\n      this.imageUrl = await this.fileSystem.CreateDownloadLink(this.file);\n    } catch (error) {\n      this.logger.error('Error setting ImageUrl', { error }, error);\n    }\n  }\n\n  setPermissions() {\n    if (!this._file || !this._file.permissions) {\n      return;\n    }\n    try {\n      const permissions = this._file.permissions;\n      this.readers = permissions.readers;\n      this.writers = permissions.writers;\n      this.others = permissions.others;\n    } catch (error) {\n      this.logger.error('file-details: setPermissions', {\n        error,\n        file: this._file\n      });\n    }\n  }\n\n  getFolderSize(folder: CoreTypes.ResFile) {\n    if(folder.metaData) {\n      let path = this.config.folderSizePath\n      return path.split('.').reduce(function(p,prop) { return p[prop] }, folder);\n    }\n    return folder.size\n  }\n}\n","import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { OnDestroy, OnInit, Input, Directive } from '@angular/core';\nimport { takeUntil, auditTime } from 'rxjs/operators';\nimport { ConvertToTitleCase } from '../../../utils/case-helper';\nimport {v4 as uuidv4 } from 'uuid';\n\n@Directive()\nexport class FormBase<T>\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\n  internalControl: FormControl = new FormControl();\n  autoCompleteObscureName: string;\n  _destroyed = new Subject();\n\n  disabled = false;\n  validationError: string;\n\n  _value: T;\n\n  @Input()\n  formControlName: string;\n  @Input()\n  placeholder: string;\n\n  constructor() {\n    // Garrentee that init and destroy are called\n    // even if ngOnInit() or ngOnDestroy() are overriden\n    const originalOnDestroy = this.ngOnDestroy;\n    this.ngOnDestroy = () => {\n      this.destroy();\n      originalOnDestroy.apply(this);\n    };\n    const originalOnInit = this.ngOnInit;\n    this.ngOnInit = () => {\n      this.init();\n      originalOnInit.apply(this);\n    };\n  }\n\n  ngOnInit() {}\n\n  ngOnDestroy() {}\n\n  init() {\n    this._destroyed.next();\n    this.autoCompleteObscureName = uuidv4();\n    this.internalControl.valueChanges\n      .pipe(takeUntil(this._destroyed))\n      .pipe(auditTime(100))\n      .subscribe(() => {\n        this._value = this.internalControl.value;\n        this.onChange(this._value);\n        this.onTouched();\n        // console.log('form-base-class: valueChanges', {val: this._value});\n      });\n\n    if (!this.placeholder) {\n      const nameParsed = ConvertToTitleCase(this.formControlName + '');\n      this.placeholder = nameParsed;\n    }\n  }\n\n  destroy() {\n    this._destroyed.next();\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n    this.internalControl.setValue(val);\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  propagateOnChange: any = () => {};\n  registerOnChange(fn: any): void {\n    this.propagateOnChange = fn;\n  }\n\n  onTouched: any = () => {};\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    setTimeout(() => {\n      if (isDisabled) {\n        this.internalControl.disable();\n      } else {\n        this.internalControl.enable();\n      }\n    });\n  }\n\n  public validate(c: FormControl) {\n    const errors = c.errors;\n    const value = c.value;\n    // console.log('form-base-class: validate()', { errors, value });\n    this.internalControl.setValidators(c.validator);\n    return !this.validationError\n      ? null\n      : {\n          validationError: {\n            valid: false\n          }\n        };\n  }\n\n  private onChange(inputValue) {\n    this.validationError = this.CheckValueIsValid();\n    if (this.validationError) {\n      this.propagateOnChange(this.value);\n    } else {\n      this.propagateOnChange(inputValue);\n    }\n  }\n\n  CheckValueIsValid(): string {\n    return null;\n  }\n}\n","export function ConvertToTitleCase(input: string): string {\n  const capitalsWithSpaces = input.replace(/([A-Z])/g, ' $1').trim();\n  const underscoresToSpaces = capitalsWithSpaces.replace(/_/g, ' ');\n  return underscoresToSpaces\n    .split(' ')\n    .map(p => p.charAt(0).toUpperCase() + p.substr(1).toLowerCase())\n    .join(' ');\n}\n","import {\n  Component,\n  forwardRef,\n  OnInit,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { FormArrayFileObject } from './FormArrayFileObject';\nimport * as firebase from 'firebase/app';\nimport 'firebase/storage';\nimport { Subject, timer } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { getFileIcon, isFileImage } from './file-icon.helper';\nimport { FormBase } from './form-base-class';\nimport { TrimSlashes } from '../../../utils/path-helpers';\nimport { NotificationService } from '../../../services/pure/notification.service';\n\nexport interface FormFilesConfiguration {\n  directory: string;\n  bucketname?: string;\n  firebaseConfig: {};\n  maxFiles?: number;\n  imageCompressionQuality?: number;\n  imageCompressionMaxSize?: number;\n  acceptedFiles?: 'image/*,application/*' | 'image/*';\n}\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'form-file-firebase',\n  template: `\n    <div>\n      <label class=\"custom-file-upload\">\n        <input\n          *ngIf=\"isMultiple\"\n          class=\"hidden\"\n          type=\"file\"\n          multiple\n          [disabled]=\"disabled || maxReached\"\n          (change)=\"onFileChange($event)\"\n        />\n        <input\n          *ngIf=\"!isMultiple\"\n          class=\"hidden\"\n          type=\"file\"\n          [disabled]=\"disabled || maxReached\"\n          (change)=\"onFileChange($event)\"\n        />\n        {{ placeholder }}\n        <div class=\"max-files\" *ngIf=\"maxReached && !disabled\">\n          Max Uploaded - Limit of {{ config.maxFiles }} file(s) reached. Remove\n          files to change uploads\n        </div>\n      </label>\n      <app-uploaded-files-list\n        [disabled]=\"disabled\"\n        [uploadedFiles]=\"this.value\"\n        (clickRemoveTag)=\"this.clickRemoveTag($event)\"\n      >\n      </app-uploaded-files-list>\n    </div>\n  `,\n  styles: [\n    `\n      .custom-file-upload {\n        border: 4px dashed #ccc;\n        display: inline-block;\n        padding: 35px 0px;\n        cursor: pointer;\n        width: calc(100% - 8px);\n        text-align: center;\n        font-size: 1.5em;\n        color: #777;\n      }\n      .hidden {\n        display: none;\n      }\n      .max-files {\n        font-size: 0.9em;\n        color: orange;\n        font-style: italic;\n      }\n    `\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FormFileFirebaseComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => FormFileFirebaseComponent),\n      multi: true\n    }\n  ]\n})\nexport class FormFileFirebaseComponent extends FormBase<FormArrayFileObject[]>\n  implements OnInit, OnDestroy {\n  @Input()\n  placeholder = 'upload here';\n  @Input()\n  config: FormFilesConfiguration = {} as any;\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  uploadStatusChanged = new EventEmitter<boolean>();\n\n  destroyed = new Subject();\n  storage: firebase.default.storage.Storage;\n\n  constructor(public ns: NotificationService) {\n    super();\n  }\n\n  ngOnInit() {\n    let app;\n    if (firebase.default.apps.length) {\n      app = firebase.default.apps[0];\n    } else {\n      app = firebase.default.initializeApp(this.config.firebaseConfig);\n    }\n    this.storage = app.storage(this.currentBucketName());\n    timer(0, 1000)\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(() => {\n        this.checkAllUploadsAreDone();\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  checkAllUploadsAreDone() {\n    const allFiles = this.value;\n    const completeArray = allFiles\n      .filter(f => !!f)\n      .filter(f => !!f.value)\n      .filter(f => !!f.value.props)\n      .map(f => f.value.props.completed);\n\n    const haveAllFilesComplete = completeArray.reduce(\n      (previous, currentComplete) => previous && currentComplete,\n      true\n    );\n    const isStillUploading = !haveAllFilesComplete;\n    this.uploadStatusChanged.emit(isStillUploading);\n  }\n\n  get isMultiple() {\n    return this.config && this.config.maxFiles !== 1;\n  }\n\n  get maxReached() {\n    return (\n      this.config &&\n      this.config.maxFiles &&\n      this.value &&\n      this.config.maxFiles === this.value.length\n    );\n  }\n\n  private currentBucketName() {\n    return (\n      this.config.bucketname ||\n      // tslint:disable-next-line: no-string-literal\n      this.config.firebaseConfig['storageBucket']\n    );\n  }\n\n  async clickRemoveTag(fileObject: FormArrayFileObject) {\n    this.ensureValueIsArray();\n    this.value = this.value.filter(f => f.id !== fileObject.id);\n    if (fileObject.bucket_path) {\n      try {\n        await this.storage.refFromURL(fileObject.bucket_path).delete();\n        console.log('form-files: clickRemoveTag() file deleted from storage', {\n          fileObject\n        });\n      } catch (error) {\n        console.log(\n          'form-files: clickRemoveTag() problem deleting file',\n          error\n        );\n      }\n    }\n  }\n\n  onFileChange(event) {\n    if (event.target.files && event.target.files.length) {\n      const filesList = event.target.files;\n      const fileArray = Array.from(filesList);\n      fileArray.map((file: File) => this.beginUploadTask(file));\n    }\n  }\n\n  async beginUploadTask(file: File) {\n    const bucketPath = 'gs://' + this.currentBucketName();\n    const uniqueFileName = file.name;\n    const originalFileName = file.name;\n    const dir = this.config.directory;\n    const dirPath = `${TrimSlashes(bucketPath)}/${TrimSlashes(dir)}`;\n    const fullPath = `${TrimSlashes(dirPath)}/${uniqueFileName}`;\n    console.log('beginUploadTask()', { fileData: file, bucketPath, fullPath });\n    let fileParsed;\n    if (file.type === 'image/*') {\n      fileParsed = await this.parseAndCompress(file);\n    } else {\n      fileParsed = file;\n    }\n    await this.addFile(uniqueFileName, originalFileName, fullPath);\n    const uploadTask = this.storage.refFromURL(fullPath).put(fileParsed);\n    uploadTask.on(firebase.default.storage.TaskEvent.STATE_CHANGED, {\n      next: snap => this.onNext(snap, fullPath),\n      error: error => this.onError(error),\n      complete: () =>\n        this.onComplete(fullPath, uniqueFileName, originalFileName)\n    });\n\n    this.destroyed.pipe(take(1)).subscribe(() => {\n      uploadTask.cancel();\n    });\n  }\n\n  async parseAndCompress(file) {\n    if (\n      !this.config.imageCompressionMaxSize &&\n      !this.config.imageCompressionQuality\n    ) {\n      return file;\n    }\n    const maxWidth = this.config.imageCompressionMaxSize || 1800;\n    const maxQuality = this.config.imageCompressionQuality || 0.6;\n    const dataURL = await blobToDataURL(file);\n    const newDataURL = await downscaleImage(\n      dataURL,\n      maxWidth,\n      maxQuality,\n      'image/jpeg'\n    );\n    const oldKb = this.getFileSizeKiloBytes(dataURL);\n    const newKb = this.getFileSizeKiloBytes(newDataURL);\n    const fileNew = dataURItoBlob(newDataURL) as File;\n    console.log(`app-tags-files.component: optimized image...\n  --> old=${oldKb} kb\n  --> new=${newKb} kb`);\n    return fileNew;\n  }\n\n  getFileSizeKiloBytes(dataURL) {\n    const head = 'data:image/*;base64,';\n    const fileSizeBytes = Math.round(((dataURL.length - head.length) * 3) / 4);\n    const fileSizeKiloBytes = (fileSizeBytes / 1024).toFixed(0);\n    return fileSizeKiloBytes;\n  }\n\n  async onNext(\n    snapshot: firebase.default.storage.UploadTaskSnapshot,\n    fullPath: string\n  ) {\n    this.ensureValueIsArray();\n    switch (snapshot.state) {\n      case firebase.default.storage.TaskState.RUNNING: // or 'running'\n        const file = this.value.find(f => f.bucket_path === fullPath);\n        const progress =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload is running', {\n          file,\n          fullPath,\n          progress,\n          snapshot\n        });\n        file.value.props.progress = progress;\n        break;\n    }\n  }\n\n  onError(error) {\n    this.ns.notify('storage/unauthorized', 'Error Uploading');\n    console.error('onError(error)', { error }, error);\n  }\n\n  async onComplete(fullPath, uniqueFileName, originalFileName) {\n    console.log('onComplete()', {});\n    const ref = this.storage.refFromURL(fullPath);\n    const url = await ref.getDownloadURL();\n    const isImage = isFileImage(originalFileName);\n\n    this.ensureValueIsArray();\n    const file = this.value.find(f => f.id === uniqueFileName);\n    file.id = url;\n    if (isImage) {\n      file.imageurl = url;\n    }\n    file.value.props.completed = true;\n    this.writeValue(this.value);\n  }\n\n  addFile(uniqueFileName: string, originalFileName: string, fullPath: string) {\n    const fileIcon = getFileIcon(originalFileName);\n    const newFile: FormArrayFileObject = {\n      id: uniqueFileName,\n      fileicon: fileIcon,\n      imageurl: null,\n      bucket_path: fullPath,\n      value: {\n        name: originalFileName,\n        props: {\n          thumb: null,\n          fileicon: fileIcon,\n          progress: 0,\n          completed: false\n        }\n      }\n    };\n    this.ensureValueIsArray();\n    this.value.push(newFile);\n  }\n\n  ensureValueIsArray() {\n    if (!Array.isArray(this.value)) {\n      this.writeValue([]);\n    }\n  }\n}\n\n// **blob to dataURL**\nasync function blobToDataURL(blob): Promise<string> {\n  const reader = new FileReader();\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = function (e: any) {\n      resolve(e.target.result as string);\n    };\n    reader.onerror = function (error: any) {\n      reject(error);\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n// Dataurl to blob\nexport function dataURItoBlob(dataURI) {\n  // convert base64 to raw binary data held in a string\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n  const byteString = atob(dataURI.split(',')[1]);\n\n  // separate out the mime component\n  const mimeString = dataURI\n    .split(',')[0]\n    .split(':')[1]\n    .split(';')[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  const ab = new ArrayBuffer(byteString.length);\n\n  // create a view into the buffer\n  const ia = new Uint8Array(ab);\n\n  // set the bytes of the buffer to the correct values\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  // write the ArrayBuffer to a blob, and you're done\n  const blob = new Blob([ab], { type: mimeString });\n  return blob;\n}\n\n// Take an image URL, downscale it to the given width, and return a new image URL.\nasync function downscaleImage(\n  dataUrl: string,\n  newWidth: number,\n  imageQuality: number,\n  imageType: string,\n  debug?: boolean\n) {\n  // Provide default values\n  imageType = imageType || 'image/jpeg';\n  imageQuality = imageQuality || 0.7;\n\n  // Create a temporary image so that we can compute the height of the downscaled image.\n  const image = new Image();\n  image.src = dataUrl;\n  await new Promise(resolve => {\n    image.onload = () => {\n      resolve('');\n    };\n  });\n  const oldWidth = image.width;\n  const oldHeight = image.height;\n  const newHeight = Math.floor((oldHeight / oldWidth) * newWidth);\n\n  // Create a temporary canvas to draw the downscaled image on.\n  const canvas = document.createElement('canvas');\n  canvas.width = newWidth;\n  canvas.height = newHeight;\n\n  // Draw the downscaled image on the canvas and return the new data URL.\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0, newWidth, newHeight);\n  const newDataUrl = canvas.toDataURL(imageType, imageQuality);\n  if (debug) {\n    console.log('quill.imageCompressor: downscaling image...', {\n      args: {\n        dataUrl,\n        newWidth,\n        imageType,\n        imageQuality\n      },\n      image,\n      oldWidth,\n      oldHeight,\n      newHeight,\n      canvas,\n      ctx,\n      newDataUrl\n    });\n  }\n  return newDataUrl;\n}\n","import { EventEmitter, Component, Input, Output } from '@angular/core';\nimport { FormArrayFileObject } from './FormArrayFileObject';\n\n@Component({\n  selector: 'app-uploaded-files-list',\n  template: `\n    <p *ngIf=\"uploadedFiles?.length\">Uploaded files:</p>\n    <div>\n      <div *ngFor=\"let file of uploadedFiles\">\n        <div class=\"full-width flex-h\">\n          <mat-icon id=\"i-done\" *ngIf=\"!disabled && isDone(file)\"\n            >done</mat-icon\n          >\n          <img class=\"file-icon\" image [src]=\"file['fileicon']\" />\n          <a class=\"full-width flex-h has-ellipsis\" [href]=\"file.id\" target=\"_blank\">\n            <span class=\"has-ellipsis\">{{ file.value.name }}</span>\n            <mat-icon class=\"i-open\">open_in_new</mat-icon>\n            <img\n              *ngIf=\"file['imageurl']\"\n              class=\"file-thumb\"\n              image\n              [src]=\"file['imageurl']\"\n            />\n          </a>\n          <mat-icon\n            *ngIf=\"!disabled\"\n            class=\"has-pointer\"\n            (click)=\"this.clickRemoveTag.emit(file)\"\n            >cancel</mat-icon\n          >\n        </div>\n        <div class=\"full-width\">\n          <mat-progress-bar\n            class=\"progress\"\n            mode=\"determinate\"\n            [value]=\"getProgress(file)\"\n          ></mat-progress-bar>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .full-width {\n        width: 100%;\n      }\n      .flex-h {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n      }\n      .has-pointer {\n        cursor: pointer;\n      }\n      .file-link {\n        display: flex;\n        align-items: center;\n      }\n      .file-thumb,\n      .file-icon {\n        margin: 0px 10px;\n        height: 30px;\n      }\n      .file-thumb {\n        background-color: #ddd;\n      }\n      .i-open {\n        font-size: 1em;\n      }\n      .has-ellipsis {\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n      }\n    `\n  ]\n})\nexport class FormFileUploadedFileListComponent {\n  @Input()\n  disabled: boolean;\n  @Input()\n  uploadedFiles: FormArrayFileObject[] = [];\n  @Output()\n  clickRemoveTag = new EventEmitter<FormArrayFileObject>();\n\n  getProgress(file: FormArrayFileObject) {\n    const isDone = this.isDone(file);\n    if (isDone) {\n      return 100;\n    }\n    if (file && file.value && file.value.props) {\n      const p = file.value.props.progress;\n      return p * 0.95; // 95% until download completed\n    }\n    return 100;\n  }\n\n  isDone(file: FormArrayFileObject): boolean {\n    if (file && file.value && file.value.props) {\n      const c = file.value.props.completed;\n      return c;\n    }\n    return false;\n  }\n}\n","import { FormFileFirebaseComponent } from './form-file-firebase/form-file-firebase.component';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { FormFileUploadedFileListComponent } from './form-file-firebase/form-file-uploader-list.component';\nimport { CommonModule } from '@angular/common';\n\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatProgressBarModule,\n    MatInputModule,\n    MatIconModule\n  ],\n  exports: [FormFileFirebaseComponent],\n  declarations: [FormFileFirebaseComponent, FormFileUploadedFileListComponent],\n  providers: []\n})\nexport class FormFileFirebaseModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { take } from 'rxjs/operators';\nimport { LoggerService } from '../logging/logger.service';\n\nexport class FileSystemRequestBuilder {\n  private options = {\n    headers: {}\n  };\n  private body: {};\n  constructor(\n    private http: HttpClient,\n    private url: string,\n    private logger: LoggerService,\n    private LOG_ID: string\n  ) { }\n  AddBody(body) {\n    this.body = {\n      ...this.body,\n      ...body\n    };\n    return this;\n  }\n  PatchBody<T>(body: Partial<T>) {\n    const partBody = body as any;\n    this.body = {\n      ...this.body,\n      ...partBody\n    };\n    return this;\n  }\n  PatchHeaders(headers: {}) {\n    this.options.headers = {\n      ...this.options.headers,\n      ...headers\n    };\n    return this;\n  }\n  MakeJson() {\n    this.options['responseType'] = 'json';\n    this.options.headers['Content-Type'] = 'application/json';\n  }\n  private makeRequestKey() {\n    const key = this.url + JSON.stringify(this.body || {});\n    return key;\n  }\n\n  async POST() {\n    const key = this.makeRequestKey();\n    try {\n      this.logger.info(this.LOG_ID + ' FileSystemRequestBuilder', {\n        url: this.url,\n        body: this.body,\n        options: this.options\n      });\n\n      this.options.headers = {\n        Authorization: window.localStorage.getItem('token')\n      }\n\n      const response = await this.http\n        .post(this.url, this.body, this.options)\n        .pipe(take(1))\n        .toPromise();\n      return response as any;\n    } catch (apiErrorResponse) {\n      console.error('API Post Error', { apiErrorResponse });\n      if (apiErrorResponse.error && apiErrorResponse.error.errorDetail) {\n        const detail = apiErrorResponse.error.errorDetail;\n        throw new Error('API Response: ' + detail);\n      }\n      throw new Error(\n        'API request failed, status:' + apiErrorResponse.statusText\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CoreTypes, FileSystemProvider } from '../../../core-types';\nimport { LoggerService } from '../logging/logger.service';\nimport { FileSystemRequestBuilder } from './server-filesystem-request';\nimport { EnsureNoTrailingSlash } from '../../utils/path-helpers';\n\n@Injectable()\nexport class ServerFilesystemProviderService implements FileSystemProvider {\n  private bucketname: string;\n  private apiEndpoint: string;\n  private isAdmin: boolean;\n\n  private LOG_ID = Math.random().toString(32).slice(2, 10);\n\n  constructor(private http: HttpClient, private logger: LoggerService) { }\n\n  private makeAPIRequest(action: CoreTypes.FileManagerAction) {\n    this.logger.info('makeAPIRequest', { action, context: this });\n\n    return new FileSystemRequestBuilder(\n      this.http,\n      this.apiEndpoint,\n      this.logger,\n      this.LOG_ID\n    ).AddBody({\n      action: action,\n      bucketname: this.bucketname,\n      isAdmin: this.isAdmin,\n    });\n  }\n\n  Initialize(config: {\n    bucketname: string;\n    apiEndpoint: string;\n    isAdmin: boolean;\n  }) {\n    this.bucketname = config.bucketname;\n    this.isAdmin = config.isAdmin;\n    this.apiEndpoint = EnsureNoTrailingSlash(config.apiEndpoint);\n  }\n\n  List(path: string): Promise<CoreTypes.ResBodyList> {\n    return this.makeAPIRequest('list')\n      .PatchBody<CoreTypes.ReqBodyList>({\n        path: path,\n      }).PatchHeaders({\n        Authorization: window.localStorage.getItem('token')\n      })\n      .POST();\n  }\n\n  CreateFolder(\n    newPath: string,\n    disableNoClobber?: boolean\n  ): Promise<CoreTypes.ResBodyCreateFolder> {\n    return this.makeAPIRequest('createFolder')\n      .PatchBody<CoreTypes.ReqBodyCreateFolder>({\n        newPath: newPath,\n      })\n      .POST();\n  }\n\n  Copy(\n    singleFileName: string,\n    newPath: string\n  ): Promise<CoreTypes.ResBodyCopy> {\n    return this.makeAPIRequest('copy')\n      .PatchBody<CoreTypes.ReqBodyCopy>({\n        singleFileName: singleFileName,\n        newPath: newPath,\n      })\n      .POST();\n  }\n\n  Move(item: string, newPath: string): Promise<CoreTypes.ResBodyMove> {\n    return this.makeAPIRequest('move')\n      .PatchBody<CoreTypes.ReqBodyMove>({\n        items: [item],\n        newPath: newPath,\n      })\n      .POST();\n  }\n\n  Rename(item: string, newItemPath: string): Promise<CoreTypes.ResBodyRename> {\n    return this.makeAPIRequest('rename')\n      .PatchBody<CoreTypes.ReqBodyRename>({\n        item: item,\n        newItemPath: newItemPath,\n      })\n      .POST();\n  }\n\n  Edit(item: string, content: string): Promise<CoreTypes.ResBodyEdit> {\n    return this.makeAPIRequest('edit')\n      .PatchBody<CoreTypes.ReqBodyEdit>({\n        item: item,\n        content: content,\n      })\n      .POST();\n  }\n\n  Getcontent(item: string): Promise<CoreTypes.ResBodyGetContent> {\n    return this.makeAPIRequest('getContent')\n      .PatchBody<CoreTypes.ReqBodyEdit>({\n        item: item,\n      })\n      .POST();\n  }\n\n  SetPermissions(\n    item: string,\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<CoreTypes.ResBodySetPermissions> {\n    return this.makeAPIRequest('changePermissions')\n      .PatchBody<CoreTypes.ReqBodySetPermissions>({\n        items: [item],\n        role: role,\n        entity: entity,\n        recursive: recursive,\n      })\n      .POST();\n  }\n\n  MoveMultiple(\n    items: string[],\n    newPath: string\n  ): Promise<CoreTypes.ResBodyMove> {\n    return this.makeAPIRequest('move')\n      .PatchBody<CoreTypes.ReqBodyMove>({\n        items: items,\n        newPath: newPath,\n      })\n      .POST();\n  }\n\n  CopyMultiple(\n    items: string[],\n    newPath: string\n  ): Promise<CoreTypes.ResBodyCopy> {\n    return this.makeAPIRequest('copy')\n      .PatchBody<CoreTypes.ReqBodyCopy>({\n        items: items,\n        newPath: newPath,\n      })\n      .POST();\n  }\n\n  SetPermissionsMultiple(\n    items: string[],\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<CoreTypes.ResBodySetPermissions> {\n    return this.makeAPIRequest('changePermissions')\n      .PatchBody<CoreTypes.ReqBodySetPermissions>({\n        items: items,\n        role: role,\n        entity: entity,\n        recursive: recursive,\n      })\n      .POST();\n  }\n\n  SetPermissionsObjectMultiple(\n    items: string[],\n    permissionsObj: CoreTypes.FilePermissionsObject,\n    recursive?: boolean\n  ): Promise<CoreTypes.ResBodySetPermissions> {\n    return this.makeAPIRequest('changePermissionsObject')\n      .PatchBody<CoreTypes.ReqBodySetPermissionsObject>({\n        items: items,\n        permissionsObj: permissionsObj,\n        recursive: recursive,\n      })\n      .POST();\n  }\n\n  Remove(items: string[]): Promise<CoreTypes.ResBodyRemove> {\n    return this.makeAPIRequest('remove')\n      .PatchBody<CoreTypes.ReqBodyRemove>({\n        items: items,\n      })\n      .POST();\n  }\n\n  GetSingle(item: string): Promise<CoreTypes.ResBodyGetSingle> {\n    return this.makeAPIRequest('getSingle')\n      .PatchBody<CoreTypes.ReqBodyGetSingle>({\n        item: item,\n      })\n      .POST();\n  }\n\n  GetUploadApiUrl(currentPath: string): string {\n    const uploadApiEndpoint =\n      this.apiEndpoint +\n      '/upload?' +\n      'bucketname=' +\n      this.bucketname +\n      '&directoryPath=' +\n      currentPath;\n    return uploadApiEndpoint;\n  }\n\n  CloneProvider(): FileSystemProvider {\n    return new ServerFilesystemProviderService(this.http, this.logger);\n  }\n\n  async CreateDownloadLink(file: CoreTypes.ResFile): Promise<string> {\n    try {\n      const response: CoreTypes.ResBodyGetSingle = await this.makeAPIRequest(\n        'getSingle'\n      )\n        .PatchBody<CoreTypes.ReqBodyGetSingle>({\n          item: file.fullPath,\n        })\n        .POST();\n      const url = response.result.url;\n      return url;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async Upload(item: string): Promise<boolean> {\n    return null;\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n// tslint:disable:component-selector\n@Component({\n  selector: 'base-dialog',\n  template: `\n    <div class=\"dialog-wrapper\">\n      <div class=\"header sans-serif flex-col align-center\">\n        <ng-container *ngTemplateOutlet=\"header\"> </ng-container>\n      </div>\n      <div class=\"body sans-serif flex-col align-center\">\n        <ng-container *ngTemplateOutlet=\"body\"> </ng-container>\n      </div>\n      <div class=\"actions sans-serif flex-col align-center\">\n        <ng-container *ngTemplateOutlet=\"actions\"> </ng-container>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .dialog-wrapper {\n        max-height: 80vh;\n        min-width: 400px;\n      }\n      .header {\n      }\n      .body {\n        overflow-y: auto;\n        max-height: 60vh;\n      }\n      .actions {\n        max-height: 200px;\n      }\n    `\n  ],\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class BaseDialogComponent {\n  @Input()\n  header: any;\n  @Input()\n  body: any;\n  @Input()\n  actions: any;\n}\n","import { Component, Inject, OnDestroy } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  FileManagerConfig,\n  NameUid\n} from '../../configuration/client-configuration';\nimport { CoreTypes } from '../../../core-types';\nimport { LoggerService } from '../../services/logging/logger.service';\n\nexport interface PermissionsDialogInterface {\n  files: CoreTypes.ResFile[];\n  config: FileManagerConfig;\n}\nexport interface PermissionsDialogResponseInterface {\n  role: CoreTypes.PermissionsRole;\n  entity: CoreTypes.FilePermissionEntity;\n  files: CoreTypes.ResFile[];\n}\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>Set Permissions</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <h5>Selected Items</h5>\n        <ol>\n          <li *ngFor=\"let file of items\">\n            {{ file.name }}\n          </li>\n        </ol>\n\n        <mat-form-field class=\"full-width\">\n          <mat-select\n            matInput\n            [formControl]=\"entityTypeControl\"\n            placeholder=\"Type\"\n          >\n            <mat-option\n              *ngFor=\"let option of entityTypeOptions\"\n              [value]=\"option\"\n            >\n              {{ option }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\" *ngIf=\"HasSelectedUser\">\n          <mat-select\n            matInput\n            [formControl]=\"entityControl\"\n            [placeholder]=\"EntityControlLabel\"\n          >\n            <mat-option *ngFor=\"let entity of $users | async\" [value]=\"entity\">\n              {{ entity.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\" *ngIf=\"!HasSelectedUser\">\n          <mat-select\n            matInput\n            [formControl]=\"entityControl\"\n            [placeholder]=\"EntityControlLabel\"\n          >\n            <mat-option *ngFor=\"let entity of $groups | async\" [value]=\"entity\">\n              {{ entity.name }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <mat-select\n            matInput\n            [formControl]=\"roleControl\"\n            placeholder=\"Permissions\"\n          >\n            <mat-option *ngFor=\"let option of roleOptions\" [value]=\"option\">\n              {{ option }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Set Permissions\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppDialogPermissionsSetComponent implements OnDestroy {\n  items: CoreTypes.ResFile[];\n  roleControl = new FormControl('READER');\n  roleOptions: CoreTypes.PermissionsRole[] = ['OWNER', 'WRITER', 'READER'];\n\n  entityTypeControl = new FormControl('group');\n  entityTypeOptions: ('user' | 'group')[] = ['user', 'group'];\n  entityControl = new FormControl();\n\n  $users: Observable<NameUid[]>;\n  $groups: Observable<NameUid[]>;\n\n  destroyed = new Subject();\n\n  constructor(\n    private logger: LoggerService,\n    public dialogRef: MatDialogRef<AppDialogPermissionsSetComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: PermissionsDialogInterface\n  ) {\n    this.items = data.files;\n    const config = data.config;\n    this.$users = config.users;\n    this.$groups = config.groups;\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  get EntityControlLabel() {\n    return this.entityTypeControl.value === 'user' ? 'User' : 'Group';\n  }\n\n  get HasSelectedUser() {\n    return this.entityTypeControl.value === 'user';\n  }\n\n  onSubmit() {\n    const choosenValue = this.entityControl.value as NameUid;\n    const entity = choosenValue.uid;\n    const response: PermissionsDialogResponseInterface = {\n      role: this.roleControl.value,\n      entity: entity,\n      files: this.data.files\n    };\n    this.logger.info('onSubmit', { entity, choosenValue, response });\n    this.dialogRef.close(response);\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  template: `\n    <base-dialog\n      [header]=\"headerTemplate\"\n      [body]=\"bodyTemplate\"\n      [actions]=\"actionsTemplate\"\n    >\n      <ng-template #headerTemplate>\n        <h2>My Details</h2>\n      </ng-template>\n      <ng-template #bodyTemplate>\n        <div>\n          The following details were\n        </div>\n      </ng-template>\n      <ng-template #actionsTemplate>\n        <btns-cancel-ok\n          okIcon=\"done\"\n          okLabel=\"Create Folder\"\n          (clickedCancel)=\"onCancel()\"\n          (clickedOk)=\"onSubmit()\"\n        >\n        </btns-cancel-ok>\n      </ng-template>\n    </base-dialog>\n  `,\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppDialogMyDetailsComponent {\n\n  constructor(public dialogRef: MatDialogRef<AppDialogMyDetailsComponent>) {}\n\n  onSubmit() {\n    this.dialogRef.close();\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'btns-cancel-ok',\n  template: `\n    <div class=\"full-width text-center\">\n      <button mat-raised-button (click)=\"clickedCancel.emit()\">\n        <mat-icon>clear</mat-icon>\n        Cancel\n      </button>\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"clickedOk.emit()\"\n        [disabled]=\"okDisabled\"\n      >\n        <mat-icon>{{ okIcon }}</mat-icon>\n        {{ okLabel }}\n      </button>\n    </div>\n  `,\n  styles: [\n    `\n      button {\n        margin: 5px;\n      }\n    `\n  ]\n})\nexport class AppBtnsCancelOkComponent {\n  @Input()\n  okDisabled: boolean;\n  @Input()\n  okIcon: string;\n  @Input()\n  okLabel: string;\n  @Output()\n  clickedOk = new EventEmitter<void>();\n  @Output()\n  clickedCancel = new EventEmitter<void>();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { CoreTypes } from '../../../core-types';\nimport { Subject } from 'rxjs';\nimport { LoggerService } from '../../services/logging/logger.service';\nimport { ActionHandlersService } from '../main-file-manager/action-handlers.service';\nimport { ClientFileSystemService } from '../../services/pure/client-filesystem.service';\nimport { OptimisticFilesystemService } from '../../services/pure/optimistic-filesystem.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MainActionDefinition } from '../actions-toolbars/MainActionDefinition';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'app-file-table-mini-folder-browser',\n  template: `\n    <div class=\"full-width mini-browser-height\">\n      <actions-mini-browser [mainActions]=\"mainActions\"> </actions-mini-browser>\n      <h4 class=\"p5 m0 color-grey\">Folders</h4>\n      <div class=\"flex-col bg-white\">\n        <card-folder\n          *ngFor=\"let folder of folders\"\n          [folder]=\"folder\"\n          [selectedItem]=\"selectedItem\"\n          (enterFolder)=\"onEnterFolder($event)\"\n        >\n        </card-folder>\n      </div>\n    </div>\n  `,\n  providers: [\n    ActionHandlersService,\n    ClientFileSystemService,\n    OptimisticFilesystemService\n  ],\n  styles: [\n    `\n      .mini-browser-height {\n        min-height: 400px;\n        max-height: 80vh;\n      }\n      .bg-white {\n        background-color: #fff;\n      }\n    `\n  ],\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppFileTableMiniFolderBrowserComponent\n  implements OnInit, OnDestroy {\n  selectedItem = new SelectionModel<string>(false);\n\n  @Input()\n  folders: CoreTypes.ResFile[];\n  @Input()\n  mainActions: MainActionDefinition[];\n  @Output()\n  enterDirectory = new EventEmitter<string>();\n  @Output()\n  selectedDirectory = new EventEmitter<string>();\n\n  destroyed = new Subject();\n\n  constructor(private logger: LoggerService) {}\n\n  async ngOnInit() {\n    this.selectedItem.changed.pipe(takeUntil(this.destroyed)).subscribe(() => {\n      const selectedDir = this.selectedItem.selected[0];\n      this.selectedDirectory.emit(selectedDir);\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  async onEnterFolder(folderPath: string) {\n    this.logger.info('onEnterFolder', { folderPath });\n    this.enterDirectory.emit(folderPath);\n    this.selectedDirectory.emit(folderPath);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { MainActionDefinition } from '../actions-toolbars/MainActionDefinition';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'actions-mini-browser',\n  template: `\n    <mat-toolbar color=\"primary\" *ngIf=\"this.mainActions\">\n      <mat-toolbar-row class=\"top-toolbar\">\n        <span class=\"top-toolbar-label\">\n          Actions\n        </span>\n      </mat-toolbar-row>\n      <mat-toolbar-row class=\"action-toolbar scroll-x\">\n        <div *ngFor=\"let action of mainActions\">\n          <button\n            class=\"action has-pointer\"\n            mat-raised-button\n            [color]=\"action.color\"\n            (click)=\"action.onClick(action)\"\n            [disabled]=\"action.$disabled | async\"\n          >\n            <mat-icon inline=\"true\">{{ action.icon }}</mat-icon>\n            {{ action.label }}\n          </button>\n        </div>\n      </mat-toolbar-row>\n    </mat-toolbar>\n  `,\n  styles: [\n    `\n      button.action {\n        margin-right: 10px;\n      }\n    `\n  ],\n  styleUrls: ['../shared-utility-styles.scss']\n})\nexport class AppActionsMiniBrowserComponent {\n  @Input()\n  mainActions: MainActionDefinition[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n * Convert bytes into largest possible unit.\n * Takes an precision argument that defaults to 2.\n * Usage:\n *   bytes | fileSize:precision\n * Example:\n *   {{ 1024 |  fileSize}}\n *   formats to: 1 KB\n*/\n@Pipe({name: 'fileSize'})\nexport class FileSizePipe implements PipeTransform {\n\n  private units = [\n    'bytes',\n    'KB',\n    'MB',\n    'GB',\n    'TB',\n    'PB'\n  ];\n\n  transform(bytesInput, precision: number = 0 ): string {\n    let bytes = +bytesInput;\n    if (!isFinite( bytes )) {\n      return '?';\n    }\n    let unit = 0;\n    while ( bytes >= 1024 ) {\n      bytes /= 1024;\n      unit ++;\n    }\n\n    return bytes.toFixed( + precision ) + ' ' + this.units[ unit ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FileSizePipe } from './file-size.pipe';\nimport { CommonModule } from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [FileSizePipe],\n  declarations: [FileSizePipe],\n  providers: [],\n})\nexport class FileSizeModule { }\n","import { Component, Input } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CoreTypes } from '../../../core-types';\nimport { FileActionDefinition } from './FileActionDefinition';\n\n@Component({\n  selector: 'card-file',\n  template: `\n    <div\n      class=\"flex-row p5 space-between bg-grey-hover rounded\"\n      matTooltip=\"Click For Details\"\n      [class.bg-grey-light]=\"isChecked\"\n      [class.bg-grey-dark]=\"isSelected\"\n      (click)=\"onSelect()\"\n    >\n      <div class=\"flex-row align-center\">\n        <mat-icon\n          *ngIf=\"!isChecked\"\n          class=\"color-white color-grey-hover\"\n          (click)=\"onCheck()\"\n          >check_box_outline_blank</mat-icon\n        >\n        <mat-icon\n          *ngIf=\"isChecked\"\n          class=\"color-black color-grey-hover\"\n          (click)=\"onUnCheck()\"\n          >check_box_outline</mat-icon\n        >\n        <img class=\"mr-10\" width=\"30\" [src]=\"file['icon']\" />\n        <div>\n          <h5 class=\"m0 mb-5 has-ellipsis\">{{ file.name }}</h5>\n          <small class=\"m0 color-grey\">{{ file.size | fileSize }}</small>\n        </div>\n      </div>\n      <div class=\"flex-row align-center\">\n        <button\n          mat-icon-button\n          [matMenuTriggerFor]=\"menu\"\n          aria-label=\"Example icon-button with a menu\"\n        >\n          <mat-icon>more_vert</mat-icon>\n        </button>\n      </div>\n    </div>\n    <mat-menu #menu=\"matMenu\">\n      <button\n        mat-menu-item\n        *ngFor=\"let action of actions\"\n        (click)=\"action.onClick(file)\"\n      >\n        <mat-icon [color]=\"action.color\">{{ action.icon }}</mat-icon>\n        <span>{{ action.label }}</span>\n      </button>\n    </mat-menu>\n  `,\n  styleUrls: ['../shared-utility-styles.scss'],\n  styles: [``]\n})\nexport class CardFileComponent {\n  get isChecked(): boolean {\n    return this.checkedItems.isSelected(this.file.fullPath);\n  }\n  get isSelected(): boolean {\n    return this.selectedItem.isSelected(this.file.fullPath);\n  }\n\n  @Input()\n  file: CoreTypes.ResFile;\n  @Input()\n  actions: FileActionDefinition[];\n  @Input()\n  checkedItems: SelectionModel<string>;\n  @Input()\n  selectedItem: SelectionModel<string>;\n\n  onSelect() {\n    this.selectedItem.select(this.file.fullPath);\n  }\n  onCheck() {\n    this.checkedItems.select(this.file.fullPath);\n  }\n  onUnCheck() {\n    this.checkedItems.deselect(this.file.fullPath);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { CoreTypes } from '../../../core-types';\nimport { FileActionDefinition } from './FileActionDefinition';\nimport { FileManagerConfig } from '../../configuration/client-configuration';\n\n@Component({\n  selector: 'card-folder',\n  template: `\n    <div\n      class=\"flex-row p5 space-between bg-grey-hover rounded\"\n      matTooltip=\"Click For Details\"\n      [class.bg-grey-light]=\"isChecked\"\n      [class.bg-grey-dark]=\"isSelected\"\n      (click)=\"onSelect()\"\n      (dblclick)=\"onDoubleClick()\"\n    >\n      <div class=\"flex-row align-center\">\n        <div *ngIf=\"checkedItems\">\n          <mat-icon\n            *ngIf=\"!isChecked\"\n            class=\"has-pointer color-white color-grey-hover\"\n            (click)=\"onCheck()\"\n            >check_box_outline_blank</mat-icon\n          >\n          <mat-icon\n            *ngIf=\"isChecked\"\n            class=\"has-pointer color-black color-grey-hover\"\n            (click)=\"onUnCheck()\"\n            >check_box_outline</mat-icon\n          >\n        </div>\n        <img class=\"mr-10\" width=\"30\" [src]=\"folder['icon']\" />\n        <div>\n          <h5 class=\"m0 mb-5 has-ellipsis\">{{ folder.name }}</h5>\n          <small *ngIf=\"config && config.folderSizePath\" class=\"m0 color-grey\">{{ getFolderSize(folder) | fileSize }}</small>\n        </div>\n      </div>\n      <button\n        *ngIf=\"actions\"\n        mat-icon-button\n        [matMenuTriggerFor]=\"menu\"\n        aria-label=\"Example icon-button with a menu\"\n      >\n        <mat-icon>more_vert</mat-icon>\n      </button>\n    </div>\n    <mat-menu #menu=\"matMenu\">\n      <button\n        mat-menu-item\n        *ngFor=\"let action of actions\"\n        (click)=\"action.onClick(folder)\"\n      >\n        <mat-icon [color]=\"action.color\">{{ action.icon }}</mat-icon>\n        <span>{{ action.label }}</span>\n      </button>\n    </mat-menu>\n  `,\n  styleUrls: ['../shared-utility-styles.scss'],\n  styles: [``]\n})\nexport class CardFolderComponent {\n  get isChecked(): boolean {\n    if (!this.checkedItems) {\n      return;\n    }\n    return this.checkedItems.isSelected(this.folder.fullPath);\n  }\n  get isSelected(): boolean {\n    return this.selectedItem.isSelected(this.folder.fullPath);\n  }\n  @Input()\n  folder: CoreTypes.ResFile;\n  @Input()\n  actions: FileActionDefinition[];\n  @Input()\n  checkedItems: SelectionModel<string>;\n  @Input()\n  selectedItem: SelectionModel<string>;\n  @Input()\n  config: FileManagerConfig;\n  @Output()\n  enterFolder = new EventEmitter<string>();\n\n  onSelect() {\n    this.selectedItem.select(this.folder.fullPath);\n  }\n  onCheck() {\n    this.checkedItems.select(this.folder.fullPath);\n  }\n  onUnCheck() {\n    this.checkedItems.deselect(this.folder.fullPath);\n  }\n  onDoubleClick() {\n    console.log('onDoubleClick!');\n    this.enterFolder.emit(this.folder.fullPath);\n  }\n\n  getFolderSize(folder: CoreTypes.ResFile) {\n    if(folder.metaData) {\n      let path = this.config.folderSizePath\n      return path.split('.').reduce(function(p,prop) { return p[prop] }, folder);\n    }\n    return folder.size\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  Output,\n  EventEmitter,\n  OnDestroy\n} from '@angular/core';\nimport { CoreTypes } from '../../../core-types';\nimport { Subject, Observable } from 'rxjs';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { takeUntil } from 'rxjs/operators';\nimport { FileActionDefinition } from './FileActionDefinition';\nimport { FileManagerConfig } from '../../configuration/client-configuration';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'app-file-table',\n  template: `\n    <div class=\"files-viewer full-width\">\n      <div *ngIf=\"folders?.length\" class=\"flex-row align-center\">\n        <mat-icon\n          *ngIf=\"!areAllFoldersChecked\"\n          class=\"has-pointer color-white color-grey-hover\"\n          (click)=\"onCheckAllFolders()\"\n          >check_box_outline_blank</mat-icon\n        >\n        <mat-icon\n          *ngIf=\"areAllFoldersChecked\"\n          class=\"has-pointer color-black color-grey-hover\"\n          (click)=\"onUnCheckAllFolders()\"\n          >check_box_outline</mat-icon\n        >\n        <h4 class=\"p5 m0 color-grey\">Folders</h4>\n      </div>\n      <div class=\"flex-col\">\n        <card-folder\n          *ngFor=\"let folder of folders\"\n          [folder]=\"folder\"\n          [config]=\"config\"\n          [checkedItems]=\"checkedItems\"\n          [selectedItem]=\"selectedItem\"\n          [actions]=\"folderActions\"\n          (enterFolder)=\"enterFolder.emit($event)\"\n        >\n        </card-folder>\n      </div>\n      <div *ngIf=\"files?.length\" class=\"flex-row align-center\">\n        <mat-icon\n          *ngIf=\"!areAllFilesChecked\"\n          class=\"has-pointer color-white color-grey-hover\"\n          (click)=\"onCheckAllFiles()\"\n          >check_box_outline_blank</mat-icon\n        >\n        <mat-icon\n          *ngIf=\"areAllFilesChecked\"\n          class=\"has-pointer color-black color-grey-hover\"\n          (click)=\"onUnCheckAllFiles()\"\n          >check_box_outline</mat-icon\n        >\n        <h4 class=\"p5 m0 color-grey\">Files</h4>\n      </div>\n      <div class=\"flex-col\">\n        <card-file\n          *ngFor=\"let file of files\"\n          [file]=\"file\"\n          [checkedItems]=\"checkedItems\"\n          [selectedItem]=\"selectedItem\"\n          [actions]=\"fileActions\"\n        >\n        </card-file>\n      </div>\n      <div class=\"nothing-here\" *ngIf=\"!files?.length && !folders.length\">\n        <p>\n          No folders/files here\n        </p>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../shared-utility-styles.scss'],\n  styles: [\n    `\n      .nothing-here {\n        padding: 20px;\n        padding-bottom: 100px;\n        font-size: 1.2em;\n        color: #777;\n      }\n      .files-viewer {\n        min-height: 500px;\n      }\n    `\n  ]\n})\nexport class AppFileTableComponent implements OnInit, OnDestroy {\n  checkedItems = new SelectionModel<string>(true);\n  selectedItem = new SelectionModel<string>(false);\n\n  clearSelected = new Subject();\n\n  @Input()\n  $triggerClearSelected: Observable<void>;\n  @Input()\n  fileActions: FileActionDefinition[];\n  @Input()\n  folderActions: FileActionDefinition[];\n  @Input()\n  files: CoreTypes.ResFile[];\n  @Input()\n  folders: CoreTypes.ResFile[];\n  @Input()\n  config: FileManagerConfig;\n  @Output()\n  checkedChanged = new EventEmitter<CoreTypes.ResFile[]>();\n  @Output()\n  selectedChanged = new EventEmitter<string>();\n  @Output()\n  enterFolder = new EventEmitter<string>();\n\n  private destroyed = new Subject();\n\n  ngOnInit() {\n    this.$triggerClearSelected\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(() => this.checkedItems.clear());\n    this.checkedItems.changed.pipe(takeUntil(this.destroyed)).subscribe(() => {\n      const folders = this.folders.filter(f =>\n        this.checkedItems.selected.includes(f.fullPath)\n      );\n      const files = this.files.filter(f =>\n        this.checkedItems.selected.includes(f.fullPath)\n      );\n      const checkedFiles = [...folders, ...files];\n      this.checkedChanged.emit(checkedFiles);\n    });\n    this.selectedItem.changed.pipe(takeUntil(this.destroyed)).subscribe(() => {\n      const [selectedFilePath] = this.selectedItem.selected;\n      this.selectedChanged.emit(selectedFilePath);\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n  }\n\n  get areAllFoldersChecked(): boolean {\n    const currentSelection = this.checkedItems.selected;\n    const hasAllFoldersSelected = this.folders.every(f =>\n      currentSelection.includes(f.fullPath)\n    );\n    return hasAllFoldersSelected;\n  }\n\n  get areAllFilesChecked(): boolean {\n    const currentSelection = this.checkedItems.selected;\n    const hasAllFilesSelected = this.files.every(f =>\n      currentSelection.includes(f.fullPath)\n    );\n    return hasAllFilesSelected;\n  }\n\n  onCheckAllFolders() {\n    this.checkedItems.select(...this.folders.map(f => f.fullPath));\n  }\n  onUnCheckAllFolders() {\n    this.checkedItems.deselect(...this.folders.map(f => f.fullPath));\n  }\n  onCheckAllFiles() {\n    this.checkedItems.select(...this.files.map(f => f.fullPath));\n  }\n  onUnCheckAllFiles() {\n    this.checkedItems.deselect(...this.files.map(f => f.fullPath));\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CardFileComponent } from './card-file.component';\nimport { CardFolderComponent } from './card-folder.component';\nimport { AppFileTableComponent } from './file-table.component';\nimport { CommonModule } from '@angular/common';\n\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\n\nimport { FileSizeModule } from '../file-size/file-size.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FileSizeModule,\n    MatMenuModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTooltipModule\n  ],\n  exports: [AppFileTableComponent, CardFolderComponent],\n  declarations: [CardFileComponent, CardFolderComponent, AppFileTableComponent],\n  providers: []\n})\nexport class AppFileTableModule {}\n","import { NgModule } from '@angular/core';\nimport { AppFileTableMiniFolderBrowserComponent } from './file-table-mini-folder-browser.component';\nimport { AppActionsMiniBrowserComponent } from './actions-mini-browser.component';\nimport { CommonModule } from '@angular/common';\nimport { FileSizeModule } from '../file-size/file-size.module';\n\nimport { AppFileTableModule } from '../file-table/file-table.module';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FileSizeModule,\n    MatButtonModule,\n    MatIconModule,\n    AppFileTableModule,\n    MatToolbarModule\n  ],\n  exports: [AppFileTableMiniFolderBrowserComponent],\n  declarations: [\n    AppFileTableMiniFolderBrowserComponent,\n    AppActionsMiniBrowserComponent\n  ],\n  providers: []\n})\nexport class FileTableMiniModule {}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewChild,\n  OnDestroy,\n} from '@angular/core';\n\nimport { FormControl, Validators } from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { Observable } from 'rxjs';\nimport { map, startWith, take } from 'rxjs/operators';\n\nimport { v4 as uuidv1 } from 'uuid';\n\nimport {\n  MatAutocomplete,\n  MatAutocompleteSelectedEvent,\n} from '@angular/material/autocomplete';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\nexport interface Tag {\n  id: string;\n  name: string;\n  isDisabled?: boolean;\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'app-control-tag-multiple',\n  template: `\n    <mat-form-field class=\"full-width\" [class.formInvalid]=\"hasRed()\">\n      <mat-chip-list #chipList [disabled]=\"!removableTags\" [multiple]=\"true\">\n        <mat-chip\n          *ngFor=\"let tag of selectInitial\"\n          [selectable]=\"selectable\"\n          [removable]=\"removableTags\"\n          (removed)=\"removeTag(tag)\"\n        >\n          {{ getLowerCase(tag) }}\n          <mat-icon matChipRemove *ngIf=\"removableTags\">cancel</mat-icon>\n        </mat-chip>\n        <input\n          #tagInput\n          [placeholder]=\"placeholder\"\n          [formControl]=\"controlAutocomplete\"\n          [matAutocomplete]=\"auto\"\n          [matChipInputFor]=\"chipList\"\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n          [matChipInputAddOnBlur]=\"addOnBlur\"\n          (matChipInputTokenEnd)=\"add($event)\"\n          [name]=\"autoCompleteObscureName\"\n        />\n      </mat-chip-list>\n      <mat-icon\n        matTooltip=\"Add many tags here, you can manage all your tags using the tag list editor in the settings menu\"\n        class=\"tag-icon\"\n        matSuffix\n        matBadge=\"â\"\n        >local_offer</mat-icon\n      >\n      <mat-autocomplete\n        #auto=\"matAutocomplete\"\n        (optionSelected)=\"selectedTag($event)\"\n      >\n        <mat-option\n          *ngFor=\"let tag of filteredTags | async\"\n          [value]=\"tag\"\n          [disabled]=\"tag['isDisabled']\"\n        >\n          {{ tag.name }}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n  `,\n  styles: [\n    `\n      .full-width {\n        width: 100%;\n      }\n      .tag-icon {\n        color: grey;\n        right: 15px;\n      }\n      .formInvalid {\n        background-color: #ff4f4f30 !important;\n      }\n      .mat-badge-active {\n        font-size: 18px;\n      }\n      mat-icon span {\n        background-color: transparent;\n        right: 1px !important;\n        top: 1px !important;\n        color: white;\n      }\n    `,\n  ],\n})\nexport class AppControlTagMultipleComponent implements OnInit, OnDestroy {\n  // Autocomplete FormGroup\n  controlAutocomplete: FormControl;\n\n  // Tag defaults\n  visible = true;\n  selectable = true;\n  addOnBlur = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n\n  filteredTags: Observable<Tag[]>;\n  @ViewChild('tagInput', { static: false })\n  tagInput: ElementRef<HTMLInputElement>;\n  @ViewChild('auto', { static: false })\n  matAutocomplete: MatAutocomplete;\n  selectInitial: Tag[];\n\n  // Variables Passed into this component\n  @Input() placeholder: string;\n  @Input() displayLowerCase: boolean;\n  @Input() control: FormControl;\n  @Input() removableTags = true;\n  @Input() allowCustom = true;\n  @Input() selectChoices$: Observable<Tag[]> = new Observable();\n\n  autoCompleteObscureName: string; // to prevent autocomplete from realising the field name\n\n  checkExists(val, name) {\n    if (val == null) {\n      throw new Error(name + ' has not been defined');\n    }\n  }\n\n  hasRed() {\n    const isDirty = this.control.dirty;\n    const notValid = this.control.invalid;\n    return isDirty && notValid;\n  }\n\n  ngOnInit() {\n    this.checkExists(this.control, 'this.group');\n    this.checkExists(this.selectChoices$, 'this.selectChoices');\n    this.selectInitial = this.control.value;\n\n    this.autoCompleteObscureName = uuidv1();\n\n    this.selectChoices$ = this.selectChoices$.pipe(take(1));\n    this.controlAutocomplete = new FormControl([], Validators.minLength(1));\n    // When selectChoices resolves (once)\n    this.selectChoices$.subscribe((selectChoicesArr) => {\n      // set the tags filtering pipe\n      this.filteredTags = this.controlAutocomplete.valueChanges.pipe(\n        startWith(null),\n        map((keyboardInput: string) => {\n          console.log({ keyboardInput }, { selectChoicesArr });\n          // Filter based on the input value\n          if (!keyboardInput) {\n            return selectChoicesArr;\n          }\n          return selectChoicesArr.filter((tag) => {\n            if (!tag) {\n              return false;\n            }\n            const val = tag.name + '';\n            if (!val.includes(keyboardInput)) {\n              return false;\n            }\n            return true;\n          });\n        })\n      );\n    });\n\n    // Add the initial values if they're passed in\n    this.controlAutocomplete.setValue(this.selectInitial);\n    this.control.markAsUntouched();\n  }\n\n  ngOnDestroy() {}\n\n  // Allow custom tags, if the selection box is not open\n  add(event: MatChipInputEvent): void {\n    if (!this.allowCustom) {\n      return;\n    }\n    if (!this.matAutocomplete.isOpen) {\n      const input = event.input;\n      const value = event.value;\n\n      // Add our Tag\n      if ((value || '').trim()) {\n        const newTagId = uuidv1();\n        const val = value.trim();\n        const newTag: Tag = {\n          id: newTagId,\n          name: val,\n        };\n        this.control.value.push(newTag);\n      }\n\n      // Reset the input value\n      if (input) {\n        input.value = '';\n      }\n      this.updateFormValue();\n    }\n  }\n\n  removeTag(removeTag: Tag): void {\n    const index = this.control.value.findIndex((t) => t.id === removeTag.id);\n\n    if (index >= 0) {\n      this.control.value.splice(index, 1);\n    }\n    this.updateFormValue();\n  }\n\n  selectedTag(event: MatAutocompleteSelectedEvent): void {\n    console.log(event);\n    const newVal = event.option.value;\n    let canPush = true;\n    this.control.value.forEach((item) => {\n      canPush = item.id !== newVal.id && canPush;\n    });\n    if (canPush) this.control.value.push(newVal);\n    this.tagInput.nativeElement.value = '';\n    this.tagInput.nativeElement.blur();\n    this.updateFormValue();\n  }\n\n  updateFormValue() {\n    this.controlAutocomplete.reset();\n    this.control.setValue(this.control.value); // Required to trigger value changes\n    this.control.markAsDirty();\n  }\n\n  getLowerCase(tag) {\n    if (!tag || !tag.name) {\n      return null;\n    }\n    const val = tag.name + '';\n    return val.toLowerCase();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AppControlTagMultipleComponent } from './tags-control.component';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatChipsModule,\n    MatAutocompleteModule,\n    MatIconModule,\n    MatInputModule,\n    MatFormFieldModule\n  ],\n  exports: [AppControlTagMultipleComponent],\n  declarations: [AppControlTagMultipleComponent],\n  providers: []\n})\nexport class TagsControlModule {}\n","import { NgModule } from '@angular/core';\nimport { BaseDialogComponent } from './base-dialog.component';\nimport { AppDialogRenameComponent } from './dialog-rename.component';\nimport { AppDialogNewFolderComponent } from './dialog-new-folder.component';\nimport { AppDialogPermissionsSetComponent } from './dialog-permissions-set.component';\nimport { AppDialogPermissionsSetObjectComponent } from './dialog-permissions-setobject.component';\nimport { AppDialogCopyComponent } from './dialog-copy-or-move.component';\nimport { AppDialogUploadFilesComponent } from './dialog-upload.component';\nimport { AppDialogMyDetailsComponent } from './dialog-my-details.components';\nimport { CommonModule } from '@angular/common';\n\nimport { AppBtnsCancelOkComponent } from './btns-cancel-ok.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FileTableMiniModule } from '../file-table-mini/file-table-mini.module';\nimport { FormFileFirebaseModule } from '../file-upload/file-upload.module';\nimport { TagsControlModule } from '../tags-control/tags-control.module';\nimport { AppDialogConfirmationComponent } from './dialog-confirmation.component';\n\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCardModule } from '@angular/material/card';\n\nconst entryComponents = [\n  BaseDialogComponent,\n  AppDialogRenameComponent,\n  AppDialogNewFolderComponent,\n  AppDialogPermissionsSetComponent,\n  AppDialogPermissionsSetObjectComponent,\n  AppDialogCopyComponent,\n  AppDialogUploadFilesComponent,\n  AppDialogMyDetailsComponent,\n  AppDialogConfirmationComponent\n];\n\nconst declarations = [...entryComponents, AppBtnsCancelOkComponent];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormFileFirebaseModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatCardModule,\n    FileTableMiniModule,\n    TagsControlModule\n  ],\n  exports: [...entryComponents],\n  entryComponents: [...entryComponents],\n  declarations: [...declarations],\n  providers: []\n})\nexport class NgxFilemanagerClientDialogsModule {}\n","import { NgModule } from '@angular/core';\nimport { APP_BASE_HREF, CommonModule, PlatformLocation } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { getBaseHref } from './getBaseHref';\nimport { LibMainFileManagerComponent } from './ui/main-file-manager/main-file-manager.component';\nimport { AppBreadCrumbsComponent } from './ui/bread-crumbs/bread-crumbs.component';\nimport { AppBulkActionsComponent } from './ui/actions-toolbars/bulk-actions.component';\nimport { AppMainActionsComponent } from './ui/actions-toolbars/main-actions.component';\nimport { FileDetailsComponent } from './ui/file-details/file-details.component';\nimport { FormFileFirebaseModule } from './ui/file-upload/file-upload.module';\nimport { FilemanagerStatusService } from './services/state/status.service';\nimport { NotificationService } from './services/pure/notification.service';\nimport { LoggerService } from './services/logging/logger.service';\nimport { ConsoleLoggerService } from './services/logging/console-logger.service';\nimport { ServerFilesystemProviderService } from './services/pure/server-filesystem.service';\nimport { IconUrlResolverService } from './services/pure/icon-url-resolver.service';\nimport { NgxFilemanagerClientDialogsModule } from './ui/dialogs/dialogs.module';\nimport { FileSizeModule } from './ui/file-size/file-size.module';\nimport { AppFileTableModule } from './ui/file-table/file-table.module';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatExpansionModule } from '@angular/material/expansion';\n\nconst declarations = [\n  LibMainFileManagerComponent,\n  AppBreadCrumbsComponent,\n  AppBulkActionsComponent,\n  AppMainActionsComponent,\n  FileDetailsComponent,\n];\n\n@NgModule({\n  declarations: declarations,\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FileSizeModule,\n\n    AppFileTableModule,\n    FormFileFirebaseModule,\n    NgxFilemanagerClientDialogsModule,\n\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatCardModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatExpansionModule\n  ],\n  exports: [LibMainFileManagerComponent],\n  providers: [\n    ServerFilesystemProviderService,\n    FilemanagerStatusService,\n    NotificationService,\n    {\n      provide: APP_BASE_HREF,\n      useFactory: getBaseHref,\n      deps: [PlatformLocation]\n    },\n    { provide: LoggerService, useClass: ConsoleLoggerService },\n    IconUrlResolverService\n  ]\n})\nexport class NgxFilemanagerClientFirebaseModule { }\n","import path from 'path-browserify';\nimport { CoreTypes, FileSystemProvider } from '../../../core-types';\nimport { ConsoleLoggerService } from '../logging/console-logger.service';\nimport {\n  EnsureTrailingSlash,\n  Add2ToPathDir,\n  Add2ToPath,\n  EnsureNoTrailingSlash\n} from '../../utils/path-helpers';\nimport { stubFiles, MakeDir, MakeFile } from './stub-files';\n\nexport class FileSystemStub implements FileSystemProvider {\n  private fakeDelayMs = 1000;\n  logger = new ConsoleLoggerService();\n\n  files: CoreTypes.ResFile[] = stubFiles;\n\n  public setFakeDelay(newDelay: number) {\n    this.fakeDelayMs = newDelay;\n  }\n\n  private async fakeDelay() {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, this.fakeDelayMs);\n    });\n  }\n  private selectMatches(items: string[], isMatch: boolean) {\n    const itemsSet = new Set(items);\n    if (isMatch) {\n      return this.files.filter(f => itemsSet.has(f.fullPath));\n    } else {\n      return this.files.filter(f => !itemsSet.has(f.fullPath));\n    }\n  }\n  private isInDirectory(dirPath, filePath): boolean {\n    try {\n      const relative = path.relative(dirPath, filePath);\n      const isSubdir =\n        relative && !relative.startsWith('..') && !relative.includes('/');\n      return isSubdir;\n    } catch (error) {\n      this.logger.warn('isInDirectory error', { dirPath, filePath, error });\n      return false;\n    }\n  }\n\n  async List(inputPath: string): Promise<CoreTypes.ResBodyList> {\n    await this.fakeDelay();\n    const folderPath = this.ensurePrefixSlash(\n      this.ensureTrailingSlash(inputPath)\n    );\n    const matches = this.files.filter(k =>\n      this.isInDirectory(folderPath, k.fullPath)\n    );\n    this.logger.info('List', { folderPath, files: this.files, matches });\n    return {\n      result: matches\n    };\n  }\n  async Rename(\n    item: string,\n    newItemPath: string\n  ): Promise<CoreTypes.ResBodyRename> {\n    await this.fakeDelay();\n    const baseName = path.basename(newItemPath);\n    this.selectMatches([item], true).map(match => {\n      match.name = baseName;\n      match.fullPath = newItemPath;\n    });\n    return null;\n  }\n  async Move(item: string, newPath: string): Promise<CoreTypes.ResBodyMove> {\n    await this.fakeDelay();\n    this.selectMatches([item], true).map(match => {\n      match.fullPath = newPath;\n    });\n    return null;\n  }\n  async Copy(\n    singleFileName: string,\n    newPath: string\n  ): Promise<CoreTypes.ResBodyCopy> {\n    await this.fakeDelay();\n    this.selectMatches([singleFileName], true).map(match => {\n      const copy = { ...match };\n      copy.fullPath = newPath;\n      this.files.push(copy);\n    });\n    return null;\n  }\n  async Edit(item: string, content: string): Promise<CoreTypes.ResBodyEdit> {\n    await this.fakeDelay();\n    this.selectMatches([item], true).map(match => {\n      match['content'] = content;\n    });\n    return null;\n  }\n  async Getcontent(item: string): Promise<CoreTypes.ResBodyGetContent> {\n    await this.fakeDelay();\n    const matches = this.selectMatches([item], true);\n    return [...matches].pop()['content'];\n  }\n  async GetSingle(item: string): Promise<CoreTypes.ResBodyGetSingle> {\n    await this.fakeDelay();\n    const matches = this.selectMatches([item], true);\n    const file = [...matches].pop();\n    return {\n      result: {\n        file,\n        url: file.downloadUrl,\n        success: true\n      }\n    };\n  }\n  async CreateFolder(newPath: string, disableNoClobber?: boolean): Promise<CoreTypes.ResBodyCreateFolder> {\n    await this.fakeDelay();\n    if (disableNoClobber ) {\n      const directoryPath = EnsureTrailingSlash(newPath);\n      this.files.push(MakeDir(directoryPath));\n    } else {\n      this.recursivelyTryToCreateFolder(newPath);\n    }\n    return null;\n  }\n  private recursivelyTryToCreateFolder(newPath: string) {\n    const directoryPath = EnsureTrailingSlash(newPath);\n    const exists = !!this.selectMatches([directoryPath], true).length;\n    if (!exists) {\n      this.files.push(MakeDir(directoryPath));\n      return;\n    }\n    const newPathWith2 = Add2ToPathDir(directoryPath);\n    return this.recursivelyTryToCreateFolder(newPathWith2);\n  }\n  async SetPermissions(\n    item: string,\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<CoreTypes.ResBodySetPermissions> {\n    return this.SetPermissionsMultiple([item], role, entity, recursive);\n  }\n  async CopyMultiple(\n    items: string[],\n    newPath: string\n  ): Promise<CoreTypes.ResBodyCopy> {\n    await this.fakeDelay();\n    this.selectMatches(items, true).map(f => {\n      const copy = { ...f };\n      copy.fullPath = path.join(newPath, f.name);\n      this.files.push(copy);\n    });\n    return null;\n  }\n  async MoveMultiple(\n    items: string[],\n    newPath: string\n  ): Promise<CoreTypes.ResBodyMove> {\n    await this.fakeDelay();\n    this.selectMatches(items, true).map(f => {\n      f.fullPath = path.join(newPath, f.name);\n    });\n    return null;\n  }\n  async SetPermissionsMultiple(\n    items: string[],\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ): Promise<CoreTypes.ResBodySetPermissions> {\n    await this.fakeDelay();\n    this.logger.info('file-system-stub: SetPermissionsMultiple', {\n      items,\n      files: this.files\n    });\n    return this.recursivelySetPermissions(items, role, entity, recursive);\n  }\n  async Upload(item: string): Promise<boolean> {\n    await this.fakeDelay();\n    this.recursivelyTryToAddFile(item);\n    return null;\n  }\n  private recursivelyTryToAddFile(filePath: string) {\n    const parsedFilePath = EnsureNoTrailingSlash(filePath);\n    const exists = !!this.selectMatches([parsedFilePath], true).length;\n    if (!exists) {\n      this.files.push(MakeFile(parsedFilePath));\n      return;\n    }\n    const newPathWith2 = Add2ToPath(parsedFilePath);\n    return this.recursivelyTryToAddFile(newPathWith2);\n  }\n  recursivelySetPermissions(\n    items: string[],\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity,\n    recursive?: boolean\n  ) {\n    const matches = this.selectMatches(items, true);\n    matches.map(item => {\n      this.setSinglePermission(item, role, entity);\n      const isFolder = item.type === 'dir';\n      if (recursive && isFolder) {\n        this.recursivelySetPermissions(\n          [item.fullPath],\n          role,\n          entity,\n          recursive\n        );\n      }\n    });\n    return null;\n  }\n  private setSinglePermission(\n    item: CoreTypes.ResFile,\n    role: CoreTypes.PermissionsRole,\n    entity: CoreTypes.FilePermissionEntity\n  ) {\n    let list: string[];\n    if (role === 'READER') {\n      list = item.permissions.readers;\n    }\n    if (role === 'WRITER') {\n      list = item.permissions.writers;\n    }\n    const inListAlready = list.includes(entity);\n    if (!inListAlready) {\n      list.push(entity);\n    }\n  }\n  async SetPermissionsObjectMultiple(\n    items: string[],\n    permissionsObj: CoreTypes.FilePermissionsObject,\n    recursive?: boolean\n  ): Promise<CoreTypes.ResBodySetPermissions> {\n    await this.fakeDelay();\n    const matches = this.selectMatches(items, true);\n    this.logger.info('file-system-stub: SetPermissionsMultiple', {\n      items,\n      matches,\n      permissionsObj\n    });\n    this.recursivelySetPermissionsObjects(items, permissionsObj, recursive);\n    return null;\n  }\n  recursivelySetPermissionsObjects(\n    items: string[],\n    permissionsObj: CoreTypes.FilePermissionsObject,\n    recursive?: boolean\n  ) {\n    const matches = this.selectMatches(items, true);\n    matches.map(item => {\n      item.permissions = permissionsObj;\n      const isFolder = item.type === 'dir';\n      if (recursive && isFolder) {\n        this.recursivelySetPermissionsObjects(\n          [item.fullPath],\n          permissionsObj,\n          recursive\n        );\n      }\n    });\n    return null;\n  }\n\n  async Remove(items: string[]): Promise<CoreTypes.ResBodyRemove> {\n    await this.fakeDelay();\n    const itemsSet = new Set(items);\n    const itemsNotDeleted = this.files.filter(f => !itemsSet.has(f.fullPath));\n    this.files = itemsNotDeleted;\n    return null;\n  }\n\n  CloneProvider(): FileSystemProvider {\n    return new FileSystemStub();\n  }\n\n  private ensureTrailingSlash(inputPath: string) {\n    const hasTrailing = inputPath.slice(-1) === '/';\n    if (hasTrailing) {\n      return inputPath;\n    }\n    return inputPath + '/';\n  }\n  private ensurePrefixSlash(inputPath: string) {\n    const hasPrefix = inputPath.slice(0, 1) === '/';\n    if (hasPrefix) {\n      return inputPath;\n    }\n    return '/' + inputPath;\n  }\n\n  GetUploadApiUrl(currentPath: string): string {\n    return 'https://httpbin.org/post';\n  }\n\n  async CreateDownloadLink(file: CoreTypes.ResFile): Promise<string> {\n    return 'https://upload.wikimedia.org/wikipedia/commons/8/85/Exponential_Function_%28Abs_Imag_Part_at_Infinity%29_Density.png';\n  }\n}\n"],"mappings":"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"}