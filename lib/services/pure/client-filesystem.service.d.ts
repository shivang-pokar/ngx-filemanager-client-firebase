import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { CoreTypes } from '../../../core-types';
import { LoggerService } from '../logging/logger.service';
import { ClientFileSystem } from './client-filesystem.interface';
import { ClientFileSystemDataStore } from '../state/client-filesystem.datastore';
import { IconUrlResolverService } from './icon-url-resolver.service';
export declare class ClientFileSystemService implements ClientFileSystem, OnDestroy {
    private logger;
    private iconResolver;
    private store;
    get $currentFiles(): Observable<CoreTypes.ResFile[]>;
    get $currentPath(): Observable<string>;
    get $selectedFile(): Observable<CoreTypes.ResFile>;
    private static instanceCount;
    private instanceCountIncr;
    private instanceCountDecr;
    get instances(): number;
    constructor(logger: LoggerService, iconResolver: IconUrlResolverService);
    ngOnDestroy(): void;
    SetStore(store: ClientFileSystemDataStore): void;
    OnList(folderPath: string): Promise<void>;
    OnCreateFolder(newPath: string, disableNoClobber?: boolean): Promise<void>;
    OnUploadedFiles(uploadedFiles: string[]): Promise<void>;
    private recursivelyTryAddFile;
    OnCopy(singleFileName: string, newPath: string): Promise<void>;
    OnMove(item: string, newPath: string): Promise<void>;
    OnRename(item: string, newItemPath: string): Promise<void>;
    OnEdit(item: string, content: string): Promise<void>;
    OnGetcontent(item: string): Promise<void>;
    OnSetPermissions(item: string, role: CoreTypes.PermissionsRole, entity: CoreTypes.FilePermissionEntity, recursive?: boolean): Promise<void>;
    OnMoveMultiple(items: string[], newPath: string): Promise<void>;
    OnCopyMultiple(items: string[], newPath: string): Promise<void>;
    OnSetPermissionsMultiple(items: string[], role: CoreTypes.PermissionsRole, entity: CoreTypes.FilePermissionEntity, recursive?: boolean): Promise<void>;
    OnSetPermissionsObjectMultiple(items: string[], permissionsObj: CoreTypes.FilePermissionsObject, recursive?: boolean): Promise<void>;
    OnRemove(items: string[]): Promise<void>;
    UpdateList(res: CoreTypes.ResBodyList, directoryPath: string): Promise<void>;
    getNextFreeFoldernameRecursively(inputDir: string, cwd: string): string;
    private removeSingleFromList;
    private EnsureNoTrailingSlash;
    private GetFileNameFromPath;
    private removeMultiple;
    get $FilesWithIcons(): Observable<CoreTypes.ResFile[]>;
    get $NoParentFolder(): Observable<boolean>;
    onSelectItem(item: CoreTypes.ResFile): any;
    CurrentFiles(): CoreTypes.ResFile[];
    private addIconPath;
    CloneProvider(): ClientFileSystemService;
}
