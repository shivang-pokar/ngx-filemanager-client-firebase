import { FileSystemProvider, CoreTypes } from '../../../core-types';
import { LoggerService } from '../../services/logging/logger.service';
import { FileManagerConfig } from '../../configuration/client-configuration';
import { ClientFileSystemService } from '../../services/pure/client-filesystem.service';
import { OptimisticFilesystemService } from '../../services/pure/optimistic-filesystem.service';
import { NotificationService } from '../../services/pure/notification.service';
import { MatDialog } from '@angular/material/dialog';
export declare class ActionHandlersService {
    private clientFilesystem;
    private optimisticFs;
    private dialog;
    private logger;
    private notifications;
    private fileSystem;
    private config;
    get $CurrentPath(): import("rxjs").Observable<string>;
    GetCurrentPath(): Promise<string>;
    ConvertToRelativePath(directoryPath: string): string;
    GetRootPath(): string;
    get $CurrentPathIsRoot(): import("rxjs").Observable<boolean>;
    get $SelectedFile(): import("rxjs").Observable<CoreTypes.ResFile>;
    get $FilesWithIcons(): import("rxjs").Observable<CoreTypes.ResFile[]>;
    constructor(clientFilesystem: ClientFileSystemService, optimisticFs: OptimisticFilesystemService, dialog: MatDialog, logger: LoggerService, notifications: NotificationService);
    init(fileSystem: FileSystemProvider, config: FileManagerConfig): Promise<void>;
    OnRename(file: CoreTypes.ResFile): Promise<void>;
    OnMoveMultiple(files: CoreTypes.ResFile[]): Promise<void>;
    OnCopyMultiple(files: CoreTypes.ResFile[]): Promise<void>;
    private checkCanAddPermissions;
    OnSetPermissionsMultiple(files: CoreTypes.ResFile[]): Promise<void>;
    OnSetPermissionsObjectMultiple(files: CoreTypes.ResFile[]): Promise<void>;
    OnDeleteMultiple(files: CoreTypes.ResFile[]): Promise<void>;
    OnNavigateTo(folderPath: string): Promise<any>;
    OnNavigateToParent(): Promise<void>;
    OnSelectItemByPath(itemPath: string): Promise<void>;
    OnUploadFilesToCurrentDirectory(): Promise<void>;
    OnNewFolderInCurrentDirectory(): Promise<void>;
    OnNewFolder(newDirName: string): Promise<void>;
    OnNewFolderClobber(newDirName: string): Promise<void>;
    OnDownloadFile(file: CoreTypes.ResFile): Promise<void>;
    private initiateDownload;
    RefreshExplorer(): Promise<any>;
    private openDialog;
    CloneProvider(): Promise<ActionHandlersService>;
    ListCurrentPathItems(path: string): Promise<CoreTypes.ResBodyList>;
}
