import { OnInit, OnDestroy } from '@angular/core';
import { Subject, BehaviorSubject, Observable } from 'rxjs';
import { FileSystemProvider, CoreTypes } from '../../../core-types';
import { LoggerService } from '../../services/logging/logger.service';
import { ActionHandlersService } from './action-handlers.service';
import { FileManagerConfig } from '../../configuration/client-configuration';
import { FilemanagerStatusService } from '../../services/state/status.service';
import { FileActionDefinition } from '../file-table/FileActionDefinition';
import { BulkActionDefinition } from '../actions-toolbars/BulkActionDefinition';
import { MainActionDefinition } from '../actions-toolbars/MainActionDefinition';
import { FileDetailActionDefinition } from '../file-details/FileDetailActionDefinition';
import { FormGroup } from '@angular/forms';
export declare class LibMainFileManagerComponent implements OnInit, OnDestroy {
    private actionHandlers;
    private logger;
    private status;
    fileSystem: FileSystemProvider;
    config: FileManagerConfig;
    isFileDetailsOpen: boolean;
    $BulkSelected: BehaviorSubject<CoreTypes.ResFile[]>;
    $triggerClearSelected: Subject<void>;
    initLoaded: any;
    requestMap: any;
    $CurrentPath: Observable<string>;
    SelectedFile: CoreTypes.ResFile;
    destroyed: Subject<unknown>;
    folderActions: FileActionDefinition[];
    fileActions: FileActionDefinition[];
    bulkActions: BulkActionDefinition[];
    mainActions: MainActionDefinition[];
    fileDetailActions: FileDetailActionDefinition[];
    folders$: Observable<CoreTypes.ResFile[]>;
    files$: Observable<CoreTypes.ResFile[]>;
    enableSearch: boolean;
    searchForm: FormGroup;
    searchKeyword: string;
    seachResultDocuments: CoreTypes.ResFile[];
    seachResultFolders: CoreTypes.ResFile[];
    documentsShow: number;
    foldersShow: number;
    isSearching: boolean;
    showSearchingSpinner: boolean;
    constructor(actionHandlers: ActionHandlersService, logger: LoggerService, status: FilemanagerStatusService);
    get $status(): Observable<import("../../services/state/status.service").RequestStatus[]>;
    get $hasSending(): Observable<boolean>;
    get $hasFailed(): Observable<boolean>;
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    makeConfig(): void;
    onEnterFolder(itemPath: string): Promise<any>;
    onSelectedFilePath(itemPath: string): Promise<void>;
    onDetailsClickDelete(file: CoreTypes.ResFile): Promise<void>;
    onDetailsClickDownload(file: CoreTypes.ResFile): Promise<void>;
    onDetailsClickRename(file: CoreTypes.ResFile): Promise<void>;
    onDetailsClickSinglePermissions(file: CoreTypes.ResFile): Promise<void>;
    onClickCrumb(newPath: string): Promise<any>;
    ClearBulkSelected(): void;
    searchAllDocumentsAndFolders(keyword: string): Promise<void>;
    private iterateCurrentDocumentAndFolders;
    checkSearchKeywordRelative(targetName: string, keyword: string): boolean;
    initCleanSearchResults(): Promise<void>;
    onSelectedSearchItem(item: CoreTypes.ResFile): void;
}
